---
title: "6 Months and 276 Months Old Babies"
description: "Recreating the 'Most Beautiful Data Visualization of All Time'"
toc: false
---

![](sleep_time.svg)

While looking for ideas on how to visualize my time-tracking data, I was surprised—pleasantly surprised—to see that many others ([and](https://www.reddit.com/r/dataisbeautiful/comments/18vvxdk/oc_ive_started_tracking_my_time_in_2023/) [I](https://www.reddit.com/r/dataisbeautiful/comments/rv9pn2/oc_i_tracked_every_hour_of_my_life_for_2021_repost/) [mean](https://www.reddit.com/r/dataisbeautiful/comments/rv01g2/oc_so_i_heard_you_like_hourly_tracking_of_the/) [many](https://www.reddit.com/r/dataisbeautiful/comments/101hvnv/oc_i_tracked_every_hour_of_my_life_for_5_years/)) have attempted similar visualizations. One of the them was a [post](https://www.relevantmisc.com/r/2020/06/01/baby-sleep-radial/) by Chris Riederer replicating "[the most beautiful visualization of all time](https://www.washingtonpost.com/news/wonk/wp/2017/01/05/what-its-like-to-sleep-like-a-baby-visualized-by-a-dad/)" by Wesley Elliott, who [visualized his daughter's sleep patterns](https://www.reddit.com/r/dataisbeautiful/comments/5l39mu/my_daughters_sleeping_patterns_for_the_first_4/).

A visualization represents six months of [<b>sleep</b>]{style="color:#3f597b;"} and [<b>wakefulness</b>]{style="color:#f7cfa3;"} of a baby and contrasts it with a little over a year worth of [<b>sleep</b>]{style="color:#3f597b;"} and [<b>suffering]{style="color:#f7cfa3;"}[</b>]{style="color:#f7cfa3;"} of a much older baby (yours truly). The spiral begins at the interior of the circle, marking the start of life for a baby. For the older baby, the spiral marks the beginning of *studying, deadlines,* and the slow demise of a healthy sleep schedule The spiral then wraps outward as babies gets older — each full revolution of the circle represents one 24-hour day, meaning that midnight is at the top of the “clock” and noon is at the bottom.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.showtext=TRUE)
```

```{r libraries}
library(stargazer)
library(tidyverse)
library(readr)
library(patchwork)
library(ggtext)
library(showtext)
library(emojifont)
library(grid)
library(transformr)
library(lubridate)
library(plotly)
library(scales)
library(ggiraph)
library(glue)
library(knitr)
library(geomtextpath)
```

```{r theme}
font_add_google("Fira Sans", "firasans")

font_add(family = "Font Awesome 6 Brands",
                   regular = "data/Font Awesome 6 Brands-Regular-400.otf")
#load.fontawesome()
#showtext::showtext_auto()
Sys.setenv(TZ = "GMT+3")

blog_theme <-
   theme_minimal(18, base_family = "Fira Sans") +
   theme(
     plot.background = element_rect(fill = "white", color = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24, margin = margin(b = 1, unit = "line")),
     legend.position = c(0, 1),
     legend.direction = "horizontal",
     legend.justification = c(0, 1),
     legend.title.align = 1,
     axis.title.y = element_text(hjust = 0, size = 10),
     axis.title.x = element_text(hjust = 0, size = 10),
     panel.grid.major = element_line(color = "#d3d9db"),
     panel.grid.minor = element_blank()
   )
 
theme_set(blog_theme)
```

```{r}
data <- read_delim("data/KSE_life_2.csv", 
    delim = ";", escape_double = FALSE, col_types = cols(time = col_time(format = "%H:%M")), 
    trim_ws = TRUE)

data_long <- gather(data, day, activity, -time) %>% 
  na.omit() %>%
  mutate(day = ifelse(day == "9/30/2022", "10/1/2022", day))

data_long$datetime <- as.POSIXct(paste(data_long$day, data_long$time), format="%m/%d/%Y %H:%M:%S", tz="GMT+3")

# data_long <- read.csv("data.csv") %>%
data_long <- data_long %>%
   mutate(
     date = as.Date(datetime),
     day_of_month = mday(datetime),
     # time_of_day = case_when(
     #   hour(datetime) < 12 ~ "Morning",
     #   hour(datetime) < 18 ~ "Day",
     #   TRUE ~ "Night"),
   time_column = if_else(substr(as.character(datetime), 12, 16) == "", "00:00", substr(as.character(datetime), 12, 16)),
   activity = ifelse(tolower(activity) %in% c("misc", "mic"), "Misc", activity),
   activity = ifelse(activity == "Transport", "Transportation", activity),
     hour = hour(datetime),
     #day = wday(datetime, label = TRUE, abbr = TRUE, week_start = 1),
     month = month(datetime, label = TRUE, abbr = FALSE),
     date_char = as.character(datetime)
   )


baby_data <- readr::read_csv("https://raw.githubusercontent.com/dodger487/snoo_plots/refs/heads/master/sleep_data.csv")

# Add rows for when baby is awake, the inverse of when baby is asleep.
df <- baby_data %>%
  select(-duration, -asleep, -soothing) %>%
  mutate(session_type = "asleep") 

inverse_df <- df %>%
  arrange(start_time) %>%
  mutate(
    start_time_new = end_time,
    end_time_new = lead(start_time),
    session_type = "awake",
    start_time = start_time_new,
    end_time = end_time_new
  ) %>%
  select(-start_time_new, -end_time_new) %>%
  filter(!is.na(start_time) & !is.na(end_time))

# Combine the "awake" and "asleep" rows.
df <- rbind(df, inverse_df) %>% arrange(start_time)


# Break up sessions that cross the midnight boundary into two sessions,
# one pre-midnight and one-after midnight, so that all sessions only take place
# in one day.
df_no_cross <- df %>% 
  filter(date(start_time) == date(end_time)) %>%
  mutate(
    start_date = date(start_time), 
    next_date = start_date + days(1),
    start_time = hms::as_hms(start_time),
    end_time = hms::as_hms(end_time))

df_cross <- df %>% filter(date(start_time) != date(end_time))
df_cross_1 <- df_cross %>% 
  mutate(
    start_date = date(start_time), 
    next_date = start_date + days(1),
    start_time = hms::as_hms(start_time),
    end_time = hms::as_hms("23:59:59")
  )
df_cross_2 <- df_cross %>% 
  mutate(
    start_date = date(end_time), 
    next_date = start_date + days(1),
    start_time = hms::as_hms("00:00:00"),
    end_time = hms::as_hms(end_time)
  )

# Combine dataframes.
rows <- rbind(
  df_no_cross,
  df_cross_1,
  df_cross_2
)
```

```{r}
baby_276 <- data_long %>%
  mutate(sleep = ifelse(activity == "Sleep", "Sleep", "Awake"),
         time_column = format(as.POSIXct(datetime), "%H:%M")) %>%
  ggplot(aes(time_column, date, fill = factor(sleep))) +
  geom_tile() +
  scale_fill_manual(values = c("Sleep" = "#3f597b", "Awake" = "#f7cfa3")) +
  scale_y_date(date_breaks = "1 month", date_labels = "%B") +
  scale_x_discrete(breaks = format(seq.POSIXt(from = as.POSIXct("00:00", format = "%H:%M"),
                                              to = as.POSIXct("23:00", format = "%H:%M"),
                                              by = "4 hours"), "%H:%M"),
                   expand=c(0, 0, 0, 0.0001)) +
  labs(x = NULL, y = NULL,
       title = "276 month old baby") +
  theme_minimal() +
  theme(
    aspect.ratio = 1,
    legend.position = "none",
    plot.title = element_text(size = 13, hjust = 0.5, face = "bold"),
    plot.title.position = "plot",
    panel.grid = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_blank(),
    axis.ticks = element_blank()
  ) + 
  coord_curvedpolar()
```

```{r}
baby_6 <- ggplot(aes(), data = rows) + 
  geom_rect(aes(xmin = start_time, xmax = end_time,
                    ymin = start_date, ymax = next_date, color = session_type)) +
  scale_y_date(name="", date_labels="%b", expand=c(0, 0)) +
  scale_x_time(labels = function(x) strftime(x, "%H:%M"),
               expand=c(0, 0, 0, 0.0001)) +
  scale_color_manual(values = c("#3f597b", "#f7cfa3"))  +
   labs(x = NULL, y = NULL, 
        title = "6 month old baby") +
  theme_minimal() +
  theme(
    aspect.ratio = 1,
     legend.position = "none",
     plot.title = element_text(size = 13, hjust = 0.5, face = "bold"),
     plot.title.position = "plot",
     panel.grid = element_blank(),
     axis.text.x = element_text(size = 10), 
     axis.text.y = element_blank()
   ) +
  coord_curvedpolar()
```

```{r}
final_plot <- baby_6 + baby_276 +
  plot_annotation(
    title = "With age babies sleep less and less",
    subtitle = glue::glue("Comparison of <span style='color:#3f597b'><strong>sleeping</strong></span> and <span style='color:#f7cfa3'><strong>waking</strong></span> hours of two babies"),
    caption = glue::glue("Baby code and data: <span style='font-family:\"Font Awesome 6 Brands\";'>&#xf09b;</span>
  <span style='color:black'>dodger487</span> <br>
    Old baby code and data: <span style='font-family:\"Font Awesome 6 Brands\";'>&#xf09b;</span>
  <span style='color:black'>vadymyudenko</span>"),
    theme = theme(
      plot.title = element_markdown(size = 16, hjust = 0.5, face = "bold"),
      plot.subtitle = element_markdown(size = 12, hjust = 0.5),
      plot.caption = element_markdown(size = 10, hjust = 0.5),
      plot.background = element_rect(fill = "gray97"))) &
  theme(text = element_text('firasans'))


# save as svg
ggsave("sleep_time.svg", final_plot, width = 10, height = 5)
```
