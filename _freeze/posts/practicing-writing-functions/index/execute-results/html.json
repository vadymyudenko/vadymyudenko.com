{
  "hash": "148f4a4b4fe8ad399d370cd0be387316",
  "result": {
    "markdown": "---\ntitle: \"\"\ndescription: \"Practicing writing functions\"\nauthor: \n - name: Vadym Yudenko\ndate: 2025-01-22\ndraft: true \ntoc: true\ncategories:\n  - functions\n  - automation\neditor: \n  markdown: \n    wrap: 72\n---\n\n\nOkay, I'm finally at the point of my data science journey, when simple Ctrl+C and Ctrl-V from one chunk to another, from one project to another, don't cut it anymore. ChatGPT and GitHub Copilot that autocomplete much of your code, while helping, they have hindered my development as a specialist. I never coded before ChatGPT, who was a Jennie that fulfilled all my wishes. It is about time I do.\n\nTo make this not only a learning experience, but practical, we'll try to solve common bottlenecks I stumble upon every project. To aid me I'm using the following resources:\n1. https://r4ds.hadley.nz/functions.html\n\nList of bottlenecks:\n1. Loading packages\n2. MVP ggplots \n3. Complex data transformation\n\n\n## What are functions\n\nFunctions \n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- function(arguments) {\n  body\n}\n```\n:::\n\n\n\n## Loading packages\n\n\n::: panel-tabset\n\n### Issue\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(ggplot)\nlibrary(ggiraph)\n```\n:::\n\n\n### Solution (#1)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload_packages <- function(libraries) {\n  \n  # library(package) and require(package) both load the namespace \n  # of the package with name package and attach it on the search list. \n  # require is designed for use inside other functions; it returns FALSE \n  # and gives a warning (rather than an error as library() does by default) \n  # if the package does not exist. Both functions check and update \n  # the list of currently attached packages and do not reload a namespace \n  # which is already loaded.\n  \n  \n  message(\"Loading packages...\")\n  \n  # load standard packages regardless\n  require(tidyverse, warn.conflicts = F, quietly = T)\n  require(dplyr, warn.conflicts = F, quietly = T)\n  require(knitr, warn.conflicts = F, quietly = T)\n  \n  for (package in libraries) {\n    require(package, warn.conflicts = F, quietly = T)\n    }\n  \n  message(\"Packages loaded!\")\n  \n}\n\nload_packages(c(\n  \"ggplot\",\n  \"ggiraph\"\n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading packages...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nPackages loaded!\n```\n:::\n:::\n\n\n:::\n\n\n::: {.callout-tip title=\"Updates\" collapse=\"true\" icon=\"false\"}\n**2025.01.22: (#1)** \n- leaned about including custom messages w/ `message()` and reminded myself of a for loop syntax\n\n:::\n\n## MVP ggplots\n\nSometimes a simple ggplot can turn a good day to bad day, because of many customization options it offers. There are many helpful packages that already simplify the workflow. For example `library(esquisse)`, `library(tidyplots)` and `library(ggcharts)` to name a few.\n\n::: panel-tabset\n\n### Issue\n\n\n::: {.cell}\n\n:::\n\n\n### Solution (#1)\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n::: {.callout-tip title=\"Updates\" collapse=\"true\" icon=\"false\"}\n**2025.01.22:** \n- leaned about including custom messages w/ `message()` and reminded myself of a for loop syntax\n\n:::\n\n## Complext data transformation\n\n::: panel-tabset\n\n### Issue\n\n\n::: {.cell}\n\n:::\n\n\n### Solution (#1)\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n\n\n\n::: {.callout-tip title=\"Session info\" collapse=\"true\" icon=\"false\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.2 (2024-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: Europe/Kiev\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] knitr_1.49      lubridate_1.9.4 forcats_1.0.0   stringr_1.5.1  \n [5] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n [9] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.4.2    tidyselect_1.2.1 \n [5] scales_1.3.0      yaml_2.3.10       fastmap_1.2.0     R6_2.5.1         \n [9] generics_0.1.3    htmlwidgets_1.6.4 munsell_0.5.1     pillar_1.10.1    \n[13] tzdb_0.4.0        rlang_1.1.5       stringi_1.8.4     xfun_0.50        \n[17] timechange_0.3.0  cli_3.6.3         withr_3.0.2       magrittr_2.0.3   \n[21] digest_0.6.37     grid_4.4.2        rstudioapi_0.17.1 hms_1.1.3        \n[25] lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.3    glue_1.8.0       \n[29] colorspace_2.1-1  rmarkdown_2.29    tools_4.4.2       pkgconfig_2.0.3  \n[33] htmltools_0.5.8.1\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}