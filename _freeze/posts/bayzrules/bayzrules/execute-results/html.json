{
  "hash": "9f456c8e1e5ebf6d6e1fd60c1d621393",
  "result": {
    "markdown": "---\ntitle: bayz_rules\ndescription: |\n  A short description of the post.\nauthor: Vadym Yudneko\ndate: 2023-08-01\ndraft: true \ncategories:\n  - bayes\n  - statistics\ncreative_commons: CC BY\n---\n\n\n## Bayesian Updating\n\nBayesian updating, the application of Bayes' Theorem:\n\n$$\n\\begin{equation}\nP(A|B) = \\frac{P(B|A)P(A)}{P(B)}\n\\end{equation}\n$$ where $P(A)$ is a prior probability, $P(B)$ is the evidence term to enforce closure, $P(B|A)$ is the posterior probability.\n\n$$\n\\begin{equation}\nP(\\text{The Thing is Happening}|\\text{Positive Test}) = \\frac{P(\\text{Positive Test}|\\text{The Thing is Happening})P(\\text{The Thing is Happening})}{P(\\text{Positive Test})}\n\\end{equation}\n$$\n\nBayes' theorem can be expanded to a form that is more readily calculated.\n\n$$\n\\begin{equation}\nP(A|B) = \\frac{P(B|A)P(A)}{P(B|A)P(A)+P(B|A^c)P(A^c)}\n\\end{equation}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(ggplot2)\n\nui <- fluidPage(\n  titlePanel(\"Bayesian Updating Demo\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(inputId = \"P_happening\",\n                  label = \"P(H)\",\n                  min = 0,\n                  max = 1,\n                  value = 0.1,\n                  step = 0.1),\n      sliderInput(inputId = \"P_positive_given_happening\",\n                  label = \"P(+|H)\",\n                  min = 0,\n                  max = 1,\n                  value = 0.9,\n                  step = 0.01),\n      sliderInput(inputId = \"P_positive_given_not_happening\",\n                  label = \"P(+|H^c)\",\n                  min = 0,\n                  max = 1,\n                  value = 0.01,\n                  step = 0.01)\n    ),\n    mainPanel(plotOutput(\"bayes_plot\"))\n  )\n)\n\nserver <- function(input, output) {\n  output$bayes_plot <- renderPlot({\n    P_happening <- input$P_happening\n    P_positive_given_happening <- input$P_positive_given_happening\n    P_positive_given_not_happening <- input$P_positive_given_not_happening\n\n    P_not_positive_given_happening <- round((1 - P_positive_given_happening), 3)\n    P_not_positive_given_not_happening <- round((1 - P_positive_given_not_happening), 3)\n    P_not_happening <- round((1.0 - P_happening), 3)\n\n    P_positive <- round((P_positive_given_happening * P_happening + P_positive_given_not_happening * P_not_happening), 3)\n    P_not_positive <- round((P_not_positive_given_happening * P_happening + P_not_positive_given_not_happening * P_not_happening), 3)\n\n    P_happening_given_positive <- round(((P_positive_given_happening * P_happening) / P_positive), 3)\n    P_not_happening_given_positive <- round((P_positive_given_not_happening * P_not_happening) / P_positive, 3)\n\n    P_happening_given_not_positive <- round(((P_not_positive_given_happening * P_happening) / P_not_positive), 3)\n    P_not_happening_given_not_positive <- round(((P_not_positive_given_not_happening * P_not_happening) / P_not_positive), 3)\n\n    # Plotting here\n    # For simplicity, just creating a bar plot, you can modify this to create the required plot\n    data <- data.frame(\n      Category = c(\"P_happening\", \"P_positive_given_happening\", \"P_positive_given_not_happening\",\n                   \"P_not_positive_given_happening\", \"P_not_positive_given_not_happening\", \"P_not_happening\", \n                   \"P_positive\", \"P_not_positive\", \"P_happening_given_positive\", \"P_not_happening_given_positive\",\n                   \"P_happening_given_not_positive\", \"P_not_happening_given_not_positive\"),\n      Value = c(P_happening, P_positive_given_happening, P_positive_given_not_happening, \n                P_not_positive_given_happening, P_not_positive_given_not_happening, P_not_happening, \n                P_positive, P_not_positive, P_happening_given_positive, P_not_happening_given_positive, \n                P_happening_given_not_positive, P_not_happening_given_not_positive)\n    )\n    ggplot(data, aes(x = Category, y = Value)) +\n      geom_bar(stat = \"identity\") +\n      theme(axis.text.x = element_text(angle = 90, hjust = 1))\n  }, height = 600, width = 800)\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nListening on http://127.0.0.1:8553\n```\n:::\n\n::: {.cell-output-display}\n![](bayzrules_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "bayzrules_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}