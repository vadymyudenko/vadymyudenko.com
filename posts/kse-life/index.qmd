---
title: "Daily life of KSE student"
description: |
  Surviving and thriving in the most intense econ masters program in Ukraine.
author: 
 - name: Vadym Yudenko
   affiliation: American University Kyiv
   affiliation-url: https://auk.edu.ua/en/
date: 2023-07-14
draft: true 
categories:
  - timetracking
  - self-surveillance
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.showtext=TRUE)
```

```{r libraries}
# devtools::install_github("liamgilbey/ggwaffle")
# library(ggwaffle)
library(stargazer)
library(tidyverse)
library(ggExtra)
library(ggtext)
library(ggthemes)
library(gganimate)
library(ggnewscale)
library(showtext)
library(grid)
library(transformr)
library(corrr)
library(corrplot)
library(lubridate)
library(reshape2)
library(plotly)
library(scales)
library(ggiraph)
library(glue)
library(knitr)
library(fontawesome)
library(RColorBrewer)
library(DT)
library(patchwork)
```

```{r theme}
font_add_google("Fira Sans", "firasans")
font_add_google("IBM Plex Mono", "ibmplex")
# showtext::showtext_auto()

blog_theme <-
   theme_minimal(18, base_family = "IBM Plex Mono") +
   theme(
     plot.background = element_rect(fill = "white", color = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24, margin = margin(b = 1, unit = "line")),
     legend.position = c(0, 1),
     legend.direction = "horizontal",
     legend.justification = c(0, 1),
     legend.title.align = 1,
     axis.title.y = element_text(hjust = 0, size = 10),
     axis.title.x = element_text(hjust = 0, size = 10),
     panel.grid.major = element_line(color = "#d3d9db"),
     panel.grid.minor = element_blank()
   )
 
theme_set(blog_theme)
```

```{r data}
# data_long <- read.csv("KSE_life.csv") %>%
#   mutate(
#     datetime = as.POSIXct(datetime, format="%m/%d/%Y %H:%M", tz="GMT+3"),
#     day_of_week = weekdays(datetime),
#     time_of_day = case_when(
#       hour(datetime) < 12 ~ "Morning",
#       hour(datetime) < 18 ~ "Day",
#       TRUE ~ "Night"
#     ),
#     time_column = if_else(substr(as.character(datetime), 12, 16) == "", "00:00", substr(as.character(datetime), 12, 16)),
#     category5 = case_when(
#       activity %in% c("Sleep", "Sport", "Communication", "Japanese") ~ activity,
#       activity %in% c("Study", "Work", "TM", "Planning", "Reading") ~ "Study/Work",
#       activity %in% c("Transportation", "Misc", "Waste", "Food") ~ "Rest"
#     ),
#     hour = hour(datetime),
#     day = wday(datetime, label = TRUE, abbr = TRUE, week_start = 1),
#     month = month(datetime, label = TRUE, abbr = FALSE),
#     date_char = as.character(datetime)
#   )
# 
# activity_colors <- c(
#   "Sleep" = "#1E90FF",  # DodgerBlue
#   "Sport" = "#32CD32",  # LimeGreen
#   "Study" = "#DAA520",  # Goldenrod
#   "Communication" = "#87CEEB",  # SkyBlue
#   "Food" = "#FFD700",  # Gold
#   "Waste" = "black",
#   "Reading" = "#FFA07A",  # LightSalmon
#   "Japanese" = "#FF69B4",  # HotPink
#   "Misc" = "#8FBC8F",  # DarkSeaGreen
#   "TM" = "#9370DB",  # MediumPurple
#   "Transportation" = "#A9A9A9"  # DarkGray
# )
# 
# time_ticks06 <- c(
#     "06:00", "06:20", "06:40", "07:00", "07:20", "07:40", "08:00", "08:20", "08:40", "09:00",
#     "09:20", "09:40", "10:00", "10:20", "10:40", "11:00", "11:20", "11:40", "12:00", "12:20",
#     "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40", "15:00", "15:20", "15:40",
#     "16:00", "16:20", "16:40", "17:00", "17:20", "17:40", "18:00", "18:20", "18:40", "19:00",
#     "19:20", "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40", "22:00", "22:20",
#     "22:40", "23:00", "23:20", "23:40", "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
#     "02:00", "02:20", "02:40", "03:00", "03:20", "03:40", "04:00", "04:20", "04:40", "05:00",
#     "05:20", "05:40"
# )
# 
# 
# time_ticks15 <- c("15:00", "15:20", "15:40", "16:00", "16:20", "16:40", "17:00",
#                 "17:20", "17:40", "18:00", "18:20", "18:40", "19:00", "19:20",
#                 "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40",
#                 "22:00", "22:20", "22:40", "23:00", "23:20", "23:40",
#                 "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
#                 "02:00", "02:20", "02:40", "03:00", "03:20", "03:40",
#                 "04:00", "04:20", "04:40", "05:00", "05:20", "05:40",
#                 "06:00", "06:20", "06:40", "07:00", "07:20", "07:40",
#                 "08:00", "08:20", "08:40", "09:00", "09:20", "09:40",
#                 "10:00", "10:20", "10:40", "11:00", "11:20", "11:40",
#                 "12:00", "12:20", "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40")
```

## 2020 {#main_plot}

::: column-screen
```{r main plot}
# p <- data_long %>% 
#   mutate(date = as.Date(datetime)) %>%
#   ggplot(aes(datetime, time_column, fill = activity)) +
#   geom_bin2d(bins = c(367, 72),  
#       aes(text = str_replace_all(paste0(
#         "<b>", time_column, "</b><br>",
#         "Activity: ", activity, "<br>"), "NA", "missing")
#       )
#     ) +
#   scale_fill_manual(values = activity_colors) +
#   scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
#                    expand = c(0, 0),
#                    date_breaks = "1 month",  # Display every month on the x-axis
#                    date_labels = "%B") +  # Format the date labels as "Month Year"
#   labs(x = NULL, y = NULL) +
#   theme_minimal() +
#   theme(
#     legend.position = "none",
#     panel.grid = element_blank(),
#     plot.title = element_text(face = "bold", size = 14),
#     axis.text.x = element_text(angle = 0, size = 10),
#     axis.text.y = element_text(hjust = 0.5, size = 6)
#     )
# 
# ggplotly(p, tooltip = "text") %>%
#   layout(
#     dragmode = "zoom",  # Enable rectangular zooming
#     yaxis = list(  
#       tickangle = 0,  
#       tickvals = seq(1, 72, by = 1) # Specify all 72 values
#     ),
#     xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
#     font = list(family = "IBM Plex Mono"),
#     hoverlabel = list(font = list(family = "IBM Plex Mono"), align = "left"),
#     yaxis2 = list(  # Adjust yaxis2 settings
#       overlaying = "y",
#       side = "left"
#     ),
#     margin = list(l = 50, r = 50, t = 20, b = 50),
#     updatemenus = list(
#       list(
#         type = "buttons",
#         showactive = FALSE
#         # buttons = list(
#         #   list(
#         #     step = "all",
#         #     label = "Reset",
#         #     method = "relayout",
#         #     args = list("yaxis.range", list(NULL, NULL))
#         #   )
#         # )
#       )
#     )
#   ) %>%
#   plotly::config(
#     displayModeBar = TRUE,
#     displaylogo = FALSE,
#     modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
#                                "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
#                                "hoverCompareCartesian", "toImage"),
#     staticPlot = FALSE,
#     height = 800  # Adjust the height of the plot
#   )

```
:::
