---
title: ""
description: |
  Surviving and thriving in the most intense econ masters program in Ukraine.
author: 
 - name: Vadym Yudenko
   affiliation: American University Kyiv
   affiliation-url: https://auk.edu.ua/en/
date: 2023-07-14
draft: true 
categories:
  - Timetracking
  - Self-surveillance
---

```{=html}
<div class="date-progress-bar">
    <div class="dates">
        <div class="date" id="2023-01-01">01-01-2023</div>
        <div class="date" id="2023-01-01">01-01-2023</div>
        <div class="date" id="2023-01-02">02-01-2023</div>
        <div class="date" id="2023-01-03">03-01-2023</div>
        <div class="date" id="2023-01-04">04-01-2023</div>
        <div class="date" id="2023-01-05">05-01-2023</div>
        <div class="date" id="2023-01-06">06-01-2023</div>
        <div class="date" id="2023-01-07">07-01-2023</div>
        <div class="date" id="2023-01-08">08-01-2023</div>
        <div class="date" id="2023-01-09">09-01-2023</div>
        <div class="date" id="2023-01-10">10-01-2023</div>
        <div class="date" id="2023-01-11">11-01-2023</div>
        <div class="date" id="2023-01-12">12-01-2023</div>
        <div class="date" id="2023-01-13">13-01-2023</div>
        <div class="date" id="2023-01-14">14-01-2023</div>
        <div class="date" id="2023-01-15">15-01-2023</div>
        <div class="date" id="2023-01-16">16-01-2023</div>
        <div class="date" id="2023-01-17">17-01-2023</div>
        <div class="date" id="2023-01-18">18-01-2023</div>
        <div class="date" id="2023-01-19">19-01-2023</div>
        <div class="date" id="2023-01-20">20-01-2023</div>
        <div class="date" id="2023-01-21">21-01-2023</div>
        <div class="date" id="2023-01-22">22-01-2023</div>
        <div class="date" id="2023-01-23">23-01-2023</div>
        <div class="date" id="2023-01-24">24-01-2023</div>
        <div class="date" id="2023-01-25">25-01-2023</div>
        <div class="date" id="2023-01-26">26-01-2023</div>
        <div class="date" id="2023-01-27">27-01-2023</div>
        <div class="date" id="2023-01-28">28-01-2023</div>
        <div class="date" id="2023-01-29">29-01-2023</div>
        <div class="date" id="2023-01-30">30-01-2023</div>
        <div class="date" id="2023-01-31">31-01-2023</div>
        <div class="date" id="2023-02-01">01-02-2023</div>
        <div class="date" id="2023-02-02">02-02-2023</div>
        <div class="date" id="2023-02-03">03-02-2023</div>
        <div class="date" id="2023-02-04">04-02-2023</div>
        <div class="date" id="2023-02-05">05-02-2023</div>
        <div class="date" id="2023-02-06">06-02-2023</div>
        <div class="date" id="2023-02-07">07-02-2023</div>
        <div class="date" id="2023-02-08">08-02-2023</div>
        <div class="date" id="2023-02-09">09-02-2023</div>
        <div class="date" id="2023-02-10">10-02-2023</div>
        <div class="date" id="2023-02-11">11-02-2023</div>
        <div class="date" id="2023-02-12">12-02-2023</div>
    </div>
    <div class="highlight"></div>
</div>
```

```{css, echo = FALSE}
.date-progress-bar {
    position: fixed;
    top: 0; /* Adjust as needed */
    right: 0; /* Aligns the bar to the right side */
    width: auto; /* Auto width based on content */
    height: 100%; /* Full height */
    overflow-y: auto; /* Enables scrolling if the bar is longer than the viewport */
}

.dates .date {
    display: block; /* Dates stacked vertically */
    padding: 3px; /* Reduced padding */
    margin-bottom: 2px; /* Space between dates */
    font-size: 12px; /* Smaller font size */
    text-align: right; /* Aligns text to the right */
    cursor: pointer; /* Changes cursor to pointer on hover */
}

.highlight {
    position: absolute;
    background-color: #76b5c5; /* Highlight color */
    border-radius: 5px;
    transition: all 0.3s ease;
    z-index: 1; /* Ensures it's above other elements */
}
```

```{js, echo = FALSE}
document.addEventListener('scroll', function() {
    var dates = document.querySelectorAll('.date');
    var highlight = document.querySelector('.highlight');

    dates.forEach(function(date) {
        var rect = date.getBoundingClientRect();

        // Check if the date is near the top of the viewport
        if (rect.top >= 0 && rect.top <= 50) { // 50 is a threshold, adjust as needed
            highlight.style.width = date.offsetWidth + 'px';
            highlight.style.height = date.offsetHeight + 'px';
            highlight.style.left = date.offsetLeft + 'px';
            highlight.style.top = date.offsetTop + 'px';
        }
    });
});
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.showtext=TRUE)
```

```{r libraries}
library(stargazer)
library(tidyverse)
library(ggExtra)
library(ggtext)
library(ggthemes)
library(gganimate)
library(ggnewscale)
library(showtext)
library(grid)
library(transformr)
library(corrr)
library(corrplot)
library(lubridate)
library(reshape2)
library(plotly)
library(scales)
library(ggiraph)
library(glue)
library(knitr)
library(fontawesome)
library(RColorBrewer)
library(DT)
library(patchwork)
```

```{r theme}
font_add_google("Fira Sans", "firasans")
font_add_google("IBM Plex Mono", "ibmplex")
# showtext::showtext_auto()

blog_theme <-
   theme_minimal(18, base_family = "IBM Plex Mono") +
   theme(
     plot.background = element_rect(fill = "white", color = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24, margin = margin(b = 1, unit = "line")),
     legend.position = c(0, 1),
     legend.direction = "horizontal",
     legend.justification = c(0, 1),
     legend.title.align = 1,
     axis.title.y = element_text(hjust = 0, size = 10),
     axis.title.x = element_text(hjust = 0, size = 10),
     panel.grid.major = element_line(color = "#d3d9db"),
     panel.grid.minor = element_blank()
   )
 
theme_set(blog_theme)
```

```{r data}
# data <- read.csv("KSE_life_3.csv") 
# data_long <- gather(data, day, activity, -X)
# data_long$day <- sub("^X", "", data_long$day)
# data_long$datetime <- as.POSIXct(paste(data_long$day, data_long$X), format="%m.%d.%Y %H:%M")
# for(i in 2:nrow(data_long)) {
#   if(!is.na(data_long$datetime[i]) && !is.na(data_long$datetime[i-1])) {
#     if(data_long$datetime[i] < data_long$datetime[i-1]) {
#       data_long$datetime[i] <- data_long$datetime[i] + 86400 # Add one day in seconds
#     }
#   }
# }
# 
# write.csv(data_long, "data.csv")

data_long <- read.csv("data.csv") %>%
   mutate(
     datetime = as.POSIXct(datetime, format="%m/%d/%Y %H:%M", tz="GMT+3"),
     day_of_week = weekdays(datetime),
     time_of_day = case_when(
       hour(datetime) < 12 ~ "Morning",
       hour(datetime) < 18 ~ "Day",
       TRUE ~ "Night"
   ),
     time_column = if_else(substr(as.character(datetime), 12, 16) == "", "00:00", substr(as.character(datetime), 12, 16)),
     category5 = case_when(
       activity %in% c("Sleep", "Sport", "Communication", "Japanese") ~ activity,
       activity %in% c("Study", "Work", "TM", "Planning", "Reading") ~ "Study/Work",
       activity %in% c("Transportation", "Misc", "Waste", "Food") ~ "Rest"
     ),
     hour = hour(datetime),
     day = wday(datetime, label = TRUE, abbr = TRUE, week_start = 1),
     month = month(datetime, label = TRUE, abbr = FALSE),
     date_char = as.character(datetime)
   )
 
activity_colors <- c(
   "Sleep" = "#1E90FF",  # DodgerBlue
   "Sport" = "#32CD32",  # LimeGreen
   "Work" = "#FF6347",  # Tomato
   "Study" = "#DAA520",  # Goldenrod
   "Communication" = "#87CEEB",  # SkyBlue
   "Food" = "#FFD700",  # Gold
   "Waste" = "black",
   "Reading" = "#FFA07A",  # LightSalmon
   "Piano" = "purple",  # HotPink
   "Misc" = "#8FBC8F",  # DarkSeaGreen
   "TM" = "#9370DB",  # MediumPurple
   "Transportation" = "#A9A9A9"  # DarkGray
)
 
activity_colors_test <- c(
   "Sleep" = "navy",  # DodgerBlue
   "Sport" = "#32CD32",  # LimeGreen
   "Work" = "red",  # Tomato
   "Study" = "blue",  # Goldenrod
   "Communication" = "#87CEEB",  # SkyBlue
   "Food" = "#FFD700",  # Gold
   "Waste" = "black",
   "Reading" = "salmon",  # LightSalmon
   "Piano" = "purple",  # HotPink
   "Misc" = "darkgreen",  # DarkSeaGreen
   "TM" = "#9370DB",  # MediumPurple
   "Transportation" = "darkgreen"  # DarkGray
)


# time_ticks06 <- c(
#     "06:00", "06:20", "06:40", "07:00", "07:20", "07:40", "08:00", "08:20", "08:40", "09:00",
#     "09:20", "09:40", "10:00", "10:20", "10:40", "11:00", "11:20", "11:40", "12:00", "12:20",
#     "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40", "15:00", "15:20", "15:40",
#     "16:00", "16:20", "16:40", "17:00", "17:20", "17:40", "18:00", "18:20", "18:40", "19:00",
#     "19:20", "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40", "22:00", "22:20",
#     "22:40", "23:00", "23:20", "23:40", "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
#     "02:00", "02:20", "02:40", "03:00", "03:20", "03:40", "04:00", "04:20", "04:40", "05:00",
#     "05:20", "05:40"
# )
# 
# 
# time_ticks15 <- c("15:00", "15:20", "15:40", "16:00", "16:20", "16:40", "17:00",
#                 "17:20", "17:40", "18:00", "18:20", "18:40", "19:00", "19:20",
#                 "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40",
#                 "22:00", "22:20", "22:40", "23:00", "23:20", "23:40",
#                 "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
#                 "02:00", "02:20", "02:40", "03:00", "03:20", "03:40",
#                 "04:00", "04:20", "04:40", "05:00", "05:20", "05:40",
#                 "06:00", "06:20", "06:40", "07:00", "07:20", "07:40",
#                 "08:00", "08:20", "08:40", "09:00", "09:20", "09:40",
#                 "10:00", "10:20", "10:40", "11:00", "11:20", "11:40",
#                 "12:00", "12:20", "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40")
```

## 2023 {#main_plot}

::: column-screen
```{r main plot}
p <- data_long %>% 
   mutate(date = as.Date(datetime)) %>%
   ggplot(aes(datetime, time_column, fill = activity)) +
   geom_bin2d(bins = c(367, 72),  
       aes(text = str_replace_all(paste0(
         "<b>", time_column, "</b><br>",
         "Activity: ", activity, "<br>"), "NA", "missing")
       )
     ) +
   scale_fill_manual(values = activity_colors_test) +
   scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                    expand = c(0, 0),
                    date_breaks = "1 month",  # Display every month on the x-axis
                    date_labels = "%B") +  # Format the date labels as "Month Year"
   labs(x = NULL, y = NULL) +
   theme_minimal() +
   theme(
     legend.position = "none",
     panel.grid = element_blank(),
     plot.title = element_text(face = "bold", size = 14),
     axis.text.x = element_text(angle = 0, size = 10),
     axis.text.y = element_text(hjust = 0.5, size = 6)
     )


ggplotly(p, tooltip = "text") %>%
   layout(
   dragmode = "zoom",  # Enable rectangular zooming
     yaxis = list(  
       tickangle = 0,  
       tickvals = seq(1, 72, by = 1) # Specify all 72 values
     ),
     xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
     font = list(family = "IBM Plex Mono"),
     hoverlabel = list(font = list(family = "IBM Plex Mono"), align = "left"),
     yaxis2 = list(  # Adjust yaxis2 settings
       overlaying = "y",
       side = "left"
     ),
     margin = list(l = 50, r = 50, t = 20, b = 50),
     updatemenus = list(
       list(
         type = "buttons",
         showactive = FALSE
         # buttons = list(
         #   list(
         #     step = "all",
         #     label = "Reset",
         #     method = "relayout",
         #     args = list("yaxis.range", list(NULL, NULL))
         #   )
         # )
       )
     )
   ) %>%
   plotly::config(
     displayModeBar = TRUE,
     displaylogo = FALSE,
     modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                                "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                                "hoverCompareCartesian", "toImage"),
     staticPlot = FALSE,
     height = 800  # Adjust the height of the plot
   )
```
:::

```{r}
ggsave(p, filename = "plot.pdf",  width = 23.4, height = 16.5, units = "in", limitsize = FALSE)

```


::: column-page
```{r}
df_activity_hours <- data_long %>%
   mutate(date = as.Date(datetime)) %>%
   group_by(date, activity) %>%
   summarise(hours = n() * (20/60)) %>%
   ungroup() 

# Filter the data for "Sleep" activity and remove the first and last rows
df_filtered_study <- df_activity_hours %>% 
  filter(activity %in% "Study") %>%
  arrange(date) %>%
  slice(2:(n()-1))

# Load necessary libraries
library(dplyr)
library(dygraphs)
library(xts)

# Convert the data frame to an xts object and rename the series
xts_data_study <- xts(df_filtered_study$hours, order.by = df_filtered_study$date)
colnames(xts_data_study) <- "Study"

# Plot the data using dygraphs
dygraph(xts_data_study) %>%
  dyOptions(stackedGraph = FALSE, fillGraph = FALSE) %>%
  dyAxis("y", label = "Hours") %>%
  dyAxis("x", label = "Date", axisLabelWidth = 60) %>%  # Adjust the axisLabelWidth here
  dySeries(name = "Study", strokeWidth = 2) %>%
  dyHighlight(highlightCircleSize = 2, highlightSeriesOpts = list(strokeWidth = 2)) %>% 
  dyRangeSelector()
```
:::

```{r}
activity_hours_total <- data_long %>%
  group_by(activity) %>%
  summarise(count_observations = n(), .groups = "drop") %>%
  mutate(total_hours = round(count_observations * (1/3),1))

activity_hours_total %>%
  plot_ly(labels = ~activity, 
          values = ~total_hours, 
          type = 'pie', 
          hoverinfo = "label+percent",
          textinfo = "label+value",
          text = ~paste(activity, ": ", sprintf("%.2f", total_hours), " hours")) %>%
  layout(title = "How much hours were spend on each activity?")
```

```{r}
library(ggstream)
library(ggtext)

p <- df_activity_hours[c(288:1196, 1198:2609),] %>%
  filter(activity %in% c("Sport", "Communication", "Food", "Waste", "Reading", "Piano", "Misc", "TM", "Transporation")) %>%
  ggplot(., 
         aes(date, hours, 
             color = activity, 
             fill = activity)) +
  geom_stream(
    geom = "contour",
    color = "white",
    linewidth = 1.25,
    type = "mirror",
    bw = .45 # Controls smoothness
  ) +
  geom_stream(
    geom = "polygon",
    bw = .45,
    linewidth = 0) +
    scale_color_manual(
    expand = c(0, 0),
    values = activity_colors,
    guide = "none") +
  scale_fill_manual(
    values = activity_colors,
    name = NULL) +
  theme(
    plot.title = element_text(
    size = 25,
    face = "bold",
    hjust = .5,
    margin = margin(10, 0, 30, 0)
  ),
  plot.caption = element_text(
    size = 9,
    color = "grey40",
    hjust = .5,
    margin = margin(20, 0, 5, 0)
  ),
  axis.text.y = element_blank(),
  axis.title = element_blank(),
  plot.background = element_rect(fill = "grey88", color = NA),
  panel.background = element_rect(fill = NA, color = NA),
  panel.grid = element_blank(),
  panel.spacing.y = unit(0, "lines"),
  strip.text.y = element_blank(),
  legend.position = "bottom",
  legend.text = element_text(size = 9, color = "grey40"),
  legend.box.margin = margin(t = 30), 
  legend.background = element_rect(
    color = "grey40", 
    size = .3, 
    fill = "grey95"
  ),
  legend.key.height = unit(.25, "lines"),
  legend.key.width = unit(2.5, "lines"),
  plot.margin = margin(rep(20, 4)))

p

```

```{r}
g <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  group_by(date, activity) %>%
  summarise(hours = n() * (20/60),
            day_of_week = day_of_week) %>%
  ungroup() %>% 
  ggplot( aes(x=date, y=hours, size = hours, color = activity)) +
    geom_point(alpha=0.7) +
    scale_size(range = c(1.4, 19), name="Population (M)") +
    viridis::scale_color_viridis(discrete=TRUE, guide=FALSE) +
    theme(legend.position="none")

g
# turn ggplot interactive with plotly
#ggplotly(g, tooltip="text")

```

![Seeing each other for the first time!](images/October%202nd.jpg){fig-align="center"}

![Посвята](images/October%2015th.jpg){fig-align="center"}

## Blackouts

![Studying at the basement during blackouts](images/photo_1_2024-01-10_10-04-25.jpg){fig-align="center"}

### 24 hour challenges

<https://www.facebook.com/100004775745586/posts/2444711955697972/?flite=scwspnss>



















Sources list (exhaustive):
- Calendar entries 
- Phone calls and Messages history (Communication)
- Kyiv Digital (Metro and bus rides)
- Bank Transactions data
- Telegram, Viber, FB Messenger, WhatsApp, Instagram (Communication)
- Email
- Multimedia's metadata
- Download history
- HELSI
- Khan Academy 
- Chess.com 
- Moodle


