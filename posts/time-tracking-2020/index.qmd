---
title: "Time Tracking: Retrospective Look"
description: |
  Looking back on my time tracking experience in 2020.
author: 
 - name: Vadym Yudenko
date: 2024-11-22
toc-depth: 3
categories:
  - Timetracking
  - Reflection
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.showtext=TRUE)
```

```{r libraries}
library(stargazer)
library(tidyverse)
library(zoo)
library(ggExtra)
library(ggtext)
library(ggthemes)
library(showtext)
library(grid)
library(transformr)
library(lubridate)
library(reshape2)
library(plotly)
library(scales)
library(ggiraph)
library(glue)
library(knitr)
library(fontawesome)
library(RColorBrewer)
library(DT)
library(patchwork)
```

```{r theme}
font_add_google("Fira Sans", "firasans")
font_add_google("IBM Plex Mono", "ibmplex")
# showtext::showtext_auto()

blog_theme <-
   theme_minimal(18, base_family = "Fira Sans") +
   theme(
     plot.background = element_rect(fill = "white", color = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24, margin = margin(b = 1, unit = "line")),
     legend.position = c(0, 1),
     legend.direction = "horizontal",
     legend.justification = c(0, 1),
     legend.title.align = 1,
     axis.title.y = element_text(hjust = 0, size = 10),
     axis.title.x = element_text(hjust = 0, size = 10),
     panel.grid.major = element_line(color = "#d3d9db"),
     panel.grid.minor = element_blank()
   )
 
theme_set(blog_theme)
```

```{r data}
data_long <- read.csv("data/data.csv") %>%
  mutate(
    datetime = as.POSIXct(datetime, format="%m/%d/%Y %H:%M", tz="GMT+3"),
    day_of_week = weekdays(datetime),
    time_of_day = case_when(
      hour(datetime) < 12 ~ "Morning",
      hour(datetime) < 18 ~ "Day",
      TRUE ~ "Night"
    ),
    time_column = if_else(substr(as.character(datetime), 12, 16) == "", "00:00", substr(as.character(datetime), 12, 16)),
    activity = case_when(
     tolower(activity) %in% c("misc", "mic") ~ "Miscellaneous",
     activity %in% c("Transport", "Transportation") ~ "Going Somewhere",
     activity == "Communication" ~ "Social Life",
     activity == "TM" ~ "Toastmasters",
     TRUE ~ activity),
    hour = hour(datetime),
    day = wday(datetime, label = TRUE, abbr = TRUE, week_start = 1),
    month = month(datetime, label = TRUE, abbr = FALSE),
    date_char = as.character(datetime))

activity_colors <- c(
   "Sleep" = "#3B4CC0",  # Deep Blue (Night)
   "Social Life" = "#87CEEB",  # SkyBlue
   "Sport" = "#1D8E3A",  # Forest Green (Active)
   #"Work" = "#C0392B",  # Red (Energy)
   "Reading" = "#F39C12",  # Golden Orange (Focus)
   "Japanese" = "#FF69B4",  # HotPink
   "Study" = "#FFD700",  # Gold
   "Food" = "#99CC99",  # Soft Green
   "Waste" = "#333333",  # Dark Charcoal
   #"Piano" = "purple",  # HotPink
   #"TM" = "#8E44AD",  # Deep Purple (Creative)
   "Planning" = "#FF6347",  # Tomato
   "Going Somewhere" = "#95A5A6",  # Urban Gray
   "Miscellaneous" = "#27AE60"  # Fresh Green
)

```

## 2020 {#main_plot}

::: column-screen
```{r main plot}
p <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = NULL, x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    plot.title = element_blank(),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 5)
    ) 

ggplotly(p, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(), 
    font = list(family = "Fira Sans"),
    hoverlabel = list(font = list(family = "Fira Sans"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 1000  # Adjust the height of the plot
  )

```
:::

Mesmerizing, isn't it? The chaos and apparent randomness of all these colors. Upon closer inspection you might notice the some recurring patterns. That sea of blue at the bottom is Sleep, a swarm of golden dots right above is breakfast (Food), and above are other daily activities. You are looking at my 2020.

2019-2020 was my sophomore year at university, where I (should) have studied entrepreneurial studies. But majority of my time was preoccupied with extracurricular activities, mainly, studying Japanese.

I've found out about time-tracking and decided to give it a try. Some thought were given to the number of categories (what to track) and the frequency of tracking (how to track). With 13 categories that sufficiently capture my life and 72 20-minute intervals I was set up to track some time.

```{r}

df <- data.frame(
  Activity = names(activity_colors),
  Description = c(
  "Sleeping, taking a nap, or resting",
  "Talking to people, texting, or social media",
  "Physical activity, exercise, or sports",
  "Reading for pleasure",
  "Studying Japanese (reading, listening, writing...)",
  "University studies, extra courses",
  "Eating and drinking",
  "Wasting time, procrastinating",
  "Journaling, reflecting, planning",
  "Commute and travel",
  "Other activities not covered by the other categories"),
  stringsAsFactors = FALSE
)


apply_highlighting <- function(activity, color_mapping) {
  highlight_css <- sprintf(
    "background-color: %s; color: white; font-weight: bold; padding: 4px; border-radius: 4px;",
    color_mapping[activity]
  )
  sprintf("<span style='%s'>%s</span>", highlight_css, activity)
}

# Apply the highlighting to the Activity column
df$Activity <- mapply(apply_highlighting, df$Activity, MoreArgs = list(activity_colors))

datatable(
  df,
  escape = FALSE, # Allows HTML in the table cells
  rownames = FALSE, # Remove row names
  options = list(
    autoWidth = FALSE,
    searching = FALSE,
    paging = FALSE,
    info = FALSE
  )
) %>%
  formatStyle(columns = names(df), padding = "4px 6px")
```

## Lessons {#lessons}

### You have only 16 hours in a day

![](images/clipboard-699419243.png)

[Sorry, Arnold](https://www.goodreads.com/quotes/11854412-you-have-24-hours-use-them), but you don't have 24 hours to use. While I appreciate the premise of the quote and it's catchy, motivating nature, it is false and I know just by how much!

My younger self was easily swayed by such simple and inspiring quotes, they made me wanna get out there and do great things! When I started time tracking, I set goals on how much hours I wanted to spend per each category. For example, I needed to spend 1000 hours learning [<b>Japanese</b>]{style="color:#FF69B4;"} by December 2020, clock at least 5 hours/week of Sports to stay fit, accumulate no less than 10 hours/week of socializing before I go crazy.

After a couple of weeks I was behind on many of my goals. Upon closer inspection I realized that I failed to account for [<b>sleep</b>]{style="color:#3B4CC0;"}.

```{r}
df_activity_hours <- data_long %>%    
  mutate(date = as.Date(datetime)) %>%    
  group_by(date, activity) %>%    
  summarise(hours = round(n() * (20/60),1)) %>%   
  ungroup()   # Filter the data for "Sleep" activity and remove the first and last rows 

df_filtered_study <- df_activity_hours %>%    
  filter(activity %in% "Study") %>%  
  mutate(hours = round(hours, digits = 1)) %>% 
  arrange(date) %>%  
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = round(zoo::rollmean(hours, k = 7, fill = NA, align = "right"), digits = 1)) 

df_filtered_sleep <- df_activity_hours %>% 
  filter(activity %in% "Sleep") %>%
  mutate(hours = round(hours, digits = 1)) %>% 
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = round(zoo::rollmean(hours, k = 7, fill = NA, align = "right"), digits = 1))

df_filtered_jap <- df_activity_hours %>%    
  filter(activity %in% "Japanese") %>%   
  arrange(date) %>%   
  slice(2:(n()-1)) %>%    
  mutate(rolling_mean = round(zoo::rollmean(hours, k = 7, fill = NA, align = "right"), digits = 1))  

df_filtered_misc <- df_activity_hours %>%   
  filter(activity %in% "Miscellaneous") %>%  
  arrange(date) %>%  
  slice(2:(n()-1)) %>%  
  mutate(rolling_mean = round(zoo::rollmean(hours, k = 7, fill = NA, align = "right"), digits = 1))  

# Function to calculate rolling mean for a specific activity
calculate_rolling_mean <- function(data, activity_name, k = 7) {
  data %>%
    filter(activity == activity_name) %>%
    arrange(date) %>%
    slice(2:(n()-1)) %>%
    mutate(
      hours = round(hours, 1),
      rolling_mean = round(rollmean(hours, k = k, fill = NA, align = "right"), 1)
    ) %>%
    mutate(activity_type = activity_name)
}

# Apply the function to all activities and bind results
activities <- unique(df_activity_hours$activity)

df_combined <- bind_rows(lapply(activities, function(act) {
  calculate_rolling_mean(df_activity_hours, act)
}))

```

```{r}
plot_ly() %>%
  add_trace(
    data = df_filtered_sleep,
    x = ~date,
    y = ~hours,
    type = 'scatter',
    mode = 'lines',
    name = 'Sleeping Hours',
    line = list(width = 1), # Thin line for original data
    color = I("#3B4CC0"), # Set marker color to black
    opacity = 0.5 # Make original data semi-transparent
  ) %>%
  add_trace(
    data = df_filtered_sleep,
    x = ~date,
    y = ~rolling_mean,
    type = 'scatter',
    mode = 'lines',
    name = 'Average',
    color = I("#3B4CC0"),
    line = list(width = 4, dash = 'solid') 
  ) %>%
  layout(
    font = list(
      family = "Fira Sans", # Set font to Fira Sans
      size = 12,           # Default font size
      color = "black"      # Default font color
    ),
    xaxis = list(
      title = "",
      range = c("2022-10-01", NA),
      tickformat = "%B" # Display full month name
    ),
    yaxis = list(
      title = "Hours",
      range = c(0, NA)
    ),
    legend = list(
      orientation = "h", # Horizontal orientation
      x = 0.5,           # Center horizontally
      y = 1,          # Position above the plot
      xanchor = "center", # Align legend at its center
      yanchor = "bottom"  # Align legend at its bottom
    ),
    hovermode = "x unified",
        annotations = list(
      # Text annotation "2019"
      list(
        x = "2019-12-20", y = -0.09, text = "2019",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Text annotation "2020"
      list(
        x = "2020-01-14", y = -0.09, text = "2020",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Right arrow
      list(
        x = "2020-01-22", y = -0.0925, ax = -30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Left arrow
      list(
        x = "2019-12-12", y = -0.0925, ax = 30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Short vertical line
      list(
        x = "2020-01-01", y = -0.09, ax = 0, ay = -20, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 0, arrowwidth = 1, arrowcolor = "gray77"
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage", "select2d", "lasso2d"),
    staticPlot = FALSE,
    height = 800
  )
```

::: column-screen
```{r}
p1 <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  filter(activity == "Sleep") %>% 
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = NULL, x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    plot.title = element_blank(),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 5)
    )


ggplotly(p1, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
    font = list(family = "Fira Sans"),
    hoverlabel = list(font = list(family = "Fira Sans"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 800  # Adjust the height of the plot
  )
```
:::

### You don't even have 16 hours in a day

Yes! Not only sleep was taking too much time, but also [<b>miscellaneous</b>]{style="color:#27AE60;"}—an umbrella category for non-productive, but necessary parts of life. Brushing teeth and taking a shower, doing groceries and laundry, cleaning a room and ironing a shirt, doing a medical check-up, waiting in a queue (!) are some of the activities that happen daily and there are no escaping them. Watching YouTube, reading social media and other such activities were not given a category of their own, they, too, fall under [<b>miscellaneous</b>]{style="color:#27AE60;"}[^1].

[^1]: [Aster Hu's blog](https://www.asterhu.com/post/2023-09-18-time-tracking-analysis/) on tracking of spare time has a great descriptions of what comprises this category.

::: column-screen
```{r}
plot1 <- data_long %>%
  filter(activity == "Miscellaneous") %>%
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = NULL, x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    plot.title = element_blank(),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 5)
    )

ggplotly(plot1, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
    font = list(family = "Fira Sans"),
    hoverlabel = list(font = list(family = "Fira Sans"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 800  # Adjust the height of the plot
  )


```
:::

There is no structure to it, it is chaotic and permeates every day. So much of my 2020 was occupied with [<b>miscellaneous</b>]{style="color:#27AE60;"} things it is scary—almost 6 hours of my day went towards this category! I didn't think I spent too much time on social media and YouTube, but looking back I absolutely did!

### Time is not found, it is made

If you considering learning a new skill, be ready to sacrifice the time needed to learn this skill from some other activity you've been doing.

In my case, I've sacrificed my [<b> university studies</b>]{style="color:#FFD700;"} to acquire [<b>Japanese</b>]{style="color:#FF69B4;"}.

In Ukraine an emergency lockdown [was declared](https://en.wikipedia.org/wiki/COVID-19_pandemic_in_Ukraine#:~:text=An%20emergency%20was%20declared%20on%2020%20March%202020%20in%20Kyiv%20Oblast%2C%20Chernivtsi%20Oblast%2C%20Zhytomyr%20Oblast%2C%20Dnipropetrovsk%20Oblast%2C%20Ivano%2DFrankivsk%20Oblast%2C%20and%20the%20city%20of%20Kyiv.) on March 20, 2020. Interestingly how with it my diligent [<b>studying</b>]{style="color:#FFD700;"} ended—average hours spent studying never came back to pre-pandemic level.

```{r}
plot_ly() %>%  
  add_trace(   
    data = df_filtered_study,  
    x = ~date,   
    y = ~hours,   
    type = 'scatter', 
    mode = 'lines',  
    name = 'Study Hours',  
    line = list(width = 1), # Thin line for original data    
    color = I("#FFD700"), # Set marker color to black  
    opacity = 0.5, # Make original data semi-transparent  
    hoverinfo = "none"  # Remove tooltip   
    ) %>%   add_trace(  
      data = df_filtered_study,   
      x = ~date,  
      y = ~rolling_mean,   
      type = 'scatter',    
      mode = 'lines',  
      name = 'Average',   
      color = I("#FFD700"), # Set marker color to black     
      line = list(width = 4, dash = 'solid') # Bold, solid line for rolling mean
      ) %>%   layout(
        font = list(    
          family = "Fira Sans", # Set font to Fira Sans    
          size = 12,           # Default font size     
          color = "black"      # Default font color   
          ),   
        xaxis = list(
          title = "",
          tickformat = "%B" # Display full month name   
          ),   
        yaxis = list(   
          title = "Hours",    
          range = c(0, NA) 
          ), 
        legend = list(   
          orientation = "h", # Horizontal orientation    
          x = 0.5,           # Center horizontally    
          y = 1,          # Position above the plot   
          xanchor = "center", # Align legend at its center     
          yanchor = "bottom"  # Align legend at its bottom    
          ),  
        hovermode = "x unified",   
        hoversubplots = "axis",
    annotations = list(
      # Text annotation "2019"
      list(
        x = "2019-12-20", y = -0.09, text = "2019",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Text annotation "2020"
      list(
        x = "2020-01-14", y = -0.09, text = "2020",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Right arrow
      list(
        x = "2020-01-22", y = -0.095, ax = -30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Left arrow
      list(
        x = "2019-12-12", y = -0.095, ax = 30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Short vertical line
      list(
        x = "2020-01-01", y = -0.09, ax = 0, ay = -20, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 0, arrowwidth = 1, arrowcolor = "gray77"
      )
    )
        ) %>%   
  plotly::config(  
    displayModeBar = TRUE,  
    displaylogo = FALSE,   
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",                                "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",                                "hoverCompareCartesian", "toImage", "select2d", "lasso2d"),  
    staticPlot = FALSE,   
    height = 800  
    ) 
```

::: column-screen
```{r}
p2 <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  filter(activity == "Study") %>%
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = NULL, x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    plot.title = element_blank(),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 5)
    )

ggplotly(p2, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
    font = list(family = "Fira Sans"),
    hoverlabel = list(font = list(family = "Fira Sans"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 800  # Adjust the height of the plot
  )

```
:::

Of course, Covid played a role—suddenly there was no need to commute to and fro university, be present and active during online classes—but I've already been steadily increasing my time with the target language. By that time I've already obtained [N4](https://en.wikipedia.org/wiki/Japanese-Language_Proficiency_Test) (A2) and knew that to reach [N3](https://en.wikipedia.org/wiki/Japanese-Language_Proficiency_Test) and above (B1+), much more hours had to be spent with the language. For [<b>Japanese</b>]{style="color:#FF69B4;"} I [needed at least 1000](https://en.wikibooks.org/wiki/JLPT_Guide/About_JLPT#cite_note-JLEC-1:~:text=Estimated%20Study%20Time) hours to pass N3 in December 2020. To get these 1000 hours I have sacrificed my main [<b>studies</b>]{style="color:#FFD700;"} in the university.

```{r}
plot_ly() %>%   # Add original data for Japanese activity  
  add_trace(  
    data = df_combined %>% filter(activity_type == "Japanese"),
    x = ~date,  
    y = ~hours,  
    type = 'scatter', 
    mode = 'lines',   
    name = 'Japanese',  
    line = list(width = 1), 
    color = I("#FF69B4"),  
    opacity = 0.5,   
    hoverinfo = "none"  # Remove tooltip   
  ) %>%   # Add rolling mean for Japanese activity   
  add_trace(     
    data = df_combined %>% filter(activity_type == "Japanese"), 
    x = ~date,  
    y = ~rolling_mean,   
    type = 'scatter',   
    mode = 'lines', 
    name = 'Average JAP',  
    line = list(width = 4, color = "#FF69B4")   
  ) %>%   # Add original data for Study activity   
  add_trace(    
    data = df_combined %>% filter(activity_type == "Study"),  
    x = ~date,  
    y = ~hours,  
    type = 'scatter',  
    mode = 'lines',  
    name = 'Study',  
    line = list(width = 1),  
    color = I("#FFD700"),   
    opacity = 0.5,   
    hoverinfo = "none"  # Remove tooltip   
  ) %>%   # Add rolling mean for Study activity   
  add_trace(   
    data = df_combined %>% filter(activity_type == "Study"),  
    x = ~date, 
    y = ~rolling_mean,    
    type = 'scatter',   
    mode = 'lines',   
    name = 'Average Study',  
    line = list(width = 4, color = "#FFD700")  
  ) %>%   # Layout adjustments  
  layout(
    font = list(   
      family = "Fira Sans",   
      size = 12,     
      color = "black"   
    ),    
    xaxis = list(   
        title = "",   
        tickformat = "%B",   
        tickvals = seq(min(df_combined$date, na.rm = TRUE), max(df_combined$date, na.rm = TRUE), by = "1 month"),    
        range = c(min(df_combined$date, na.rm = TRUE), max(df_combined$date, na.rm = TRUE))  
    ),    
    yaxis = list(    
      title = "Hours",     
      range = c(0, NA)  
    ),  
    legend = list(   
      orientation = "h",    
      x = 0.5, 
      y = 1,    
      xanchor = "center",   
      yanchor = "bottom"   
    ),     
    shapes = list( 
        list(   
          type = "line",  
          x0 = "2020-03-20",  
          x1 = "2020-03-20",     
          y0 = 0,    
          y1 = 10,    
          line = list(  
            color = "black",   
            width = 1,  
            dash = "solid"    
          )   
        )    
    ),     annotations = list(   
          list(x = "2020-03-20", y = 1, text = "Lockdown", showarrow = FALSE, xref = "x", yref = "paper", align = "right"),
                # Text annotation "2019"
      list(
        x = "2019-12-23", y = -0.09, text = "2019",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Text annotation "2020"
      list(
        x = "2020-01-19", y = -0.09, text = "2020",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Right arrow
      list(
        x = "2020-01-27", y = -0.0925, ax = -30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Left arrow
      list(
        x = "2019-12-15", y = -0.0925, ax = 30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Short vertical line
      list(
        x = "2020-01-06", y = -0.09, ax = 0, ay = -20, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 0, arrowwidth = 1, arrowcolor = "gray77"
      )
          ),   
    hovermode = "x unified"   
  ) %>%   # Add customizations for interactivity and appearance  
  plotly::config(    
    displayModeBar = TRUE,  
    displaylogo = FALSE,   
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",                                "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",                                "hoverCompareCartesian", "toImage", "select2d", "lasso2d"),  
    staticPlot = FALSE,  
    height = 800  
    )
```

::: column-screen
```{r}
p3 <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  filter(activity %in% c("Study", "Japanese")) %>%
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = NULL, x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    plot.title = element_blank(),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 5)
    )

ggplotly(p3, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
    font = list(family = "Fira Sans"),
    hoverlabel = list(font = list(family = "Fira Sans"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 800  # Adjust the height of the plot
  )
```
:::

## Hindsight 20/20

Could I have still gotten these 1000 hours without sacrificing arguably important part of life? Absolutely! I could spend every waking hour working/studying, have food brought to me, replace social life with daily work meetings—what a wicked thought—and never see the light of day! But what a miserable life that would be!

Looking back, I could have spent less time scrolling feed in the morning and before bed, watching videos after school, and instead spend more time with friends and family, doing sports and studying [<b>Japanese</b>]{style="color:#FF69B4;"}.

```{r}
plot_ly() %>%
  add_trace(
    data = df_combined %>% filter(activity_type == "Japanese"),
    x = ~date,
    y = ~hours,
    type = 'scatter',
    mode = 'lines',
    name = 'Japanese',
    line = list(width = 1),
    color = I("#FF69B4"),
    opacity = 0.5,
    hoverinfo = "none"  # Remove tooltip
  ) %>%
  # Add rolling mean for Japanese activity
  add_trace(
    data = df_combined %>% filter(activity_type == "Japanese"),
    x = ~date,
    y = ~rolling_mean,
    type = 'scatter',
    mode = 'lines',
    name = 'Average JAP',
    line = list(width = 4, color = "#FF69B4")
  ) %>%
  add_trace(
    data = df_combined %>% filter(activity_type == "Study"),
    x = ~date,
    y = ~hours,
    type = 'scatter',
    mode = 'lines',
    name = 'Study',
    line = list(width = 1),
    color = I("#FFD700"),
    opacity = 0.5,
    hoverinfo = "none"  # Remove tooltip
  ) %>%
  add_trace(
    data = df_combined %>% filter(activity_type == "Study"),
    x = ~date,
    y = ~rolling_mean,
    type = 'scatter',
    mode = 'lines',
    name = 'Average Study',
    line = list(width = 4, color = "#FFD700")
  ) %>%
  add_trace(
    data = df_combined %>% filter(activity_type == "Miscellaneous"),
    x = ~date,
    y = ~hours,
    type = 'scatter',
    mode = 'lines',
    name = 'Miscellaneous',
    line = list(width = 1),
    color = I("#27AE60"),
    opacity = 0.5,
    hoverinfo = "none"  # Remove tooltip
  ) %>%
  add_trace(
    data = df_combined %>% filter(activity_type == "Miscellaneous"),
    x = ~date,
    y = ~rolling_mean,
    type = 'scatter',
    mode = 'lines',
    name = 'Average Miscellaneous',
    line = list(width = 4, color = "#27AE60")
  ) %>%
  # Layout adjustments
  layout(
    font = list(
      family = "Fira Sans",
      size = 12,
      color = "black"
    ),
    xaxis = list(
      title = "",
      tickformat = "%B",
      tickvals = seq(min(df_combined$date, na.rm = TRUE), max(df_combined$date, na.rm = TRUE), by = "1 month"),
      range = c(min(df_combined$date, na.rm = TRUE), max(df_combined$date, na.rm = TRUE))
    ),
    yaxis = list(
      title = "Hours",
      range = c(0, NA)
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = 1,
      xanchor = "center",
      yanchor = "bottom"
    ),
    shapes = list(
      list(
        type = "line",
        x0 = "2020-03-20",
        x1 = "2020-03-20",
        y0 = 0,
        y1 = 12.5,
        line = list(
          color = "black",
          width = 1,
          dash = "solid"
        )
      )
    ),
    annotations = list(
      list(x = "2020-03-20", y = 1, text = "Lockdown", showarrow = FALSE, xref = "x", yref = "paper", align = "right"),
                # Text annotation "2019"
      list(
        x = "2019-12-23", y = -0.09, text = "2019",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Text annotation "2020"
      list(
        x = "2020-01-19", y = -0.09, text = "2020",
        showarrow = FALSE, xref = "x", yref = "paper",
        font = list(size = 12, color = "gray77")
      ),
      # Right arrow
      list(
        x = "2020-01-27", y = -0.0925, ax = -30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Left arrow
      list(
        x = "2019-12-15", y = -0.0925, ax = 30, ay = 0, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 2, arrowsize = 1, arrowwidth = 1, arrowcolor = "gray77"
      ),
      # Short vertical line
      list(
        x = "2020-01-06", y = -0.09, ax = 0, ay = -20, text = "",
        xref = "x", yref = "paper", axref = "pixel", ayref = "pixel",
        arrowhead = 0, arrowwidth = 1, arrowcolor = "gray77"
      )),
    hovermode = "x unified"
  ) %>%
  # Add customizations for interactivity and appearance
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage", "select2d", "lasso2d"),
    staticPlot = FALSE,
    height = 800
  )

```

::: column-screen
```{r}
p4 <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  filter(activity %in% c("Study", "Japanese", "Miscellaneous")) %>%
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = NULL, x = NULL, y = NULL) +
  theme(
    legend.position = "none",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_blank(),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 5)
    )

ggplotly(p4, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
    font = list(family = "Fira Sans"),
    hoverlabel = list(font = list(family = "Fira Sans"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 800  # Adjust the height of the plot
  )

```
:::

## Goals

By the end of 2020 reached 1000 hours, but the exam was cancelled due to Covid. I have spent $\approx5.5$ hours/week doing [<b> sports</b>]{style="color:#1D8E3A;"} (more than I planned). By 2020's standard my Social Life blossoming! I have set—yes, I was thinking in term of hours here, too—a target of 10 hours/week for Social Life

And most importantly became more conscious of how I spend my time.

```{r plot total hours}
#| classes: preview-image
activity_hours_total <- data_long %>%
  group_by(activity) %>%
  summarise(count_observations = n(), .groups = "drop") %>%
  mutate(total_hours = round(count_observations * (1/3),1))

activity_hours_total %>%
  arrange(desc(total_hours)) %>%
  plot_ly(
    x = ~total_hours,
    y = ~reorder(activity, total_hours),
    type = 'bar',
    text = ~paste(activity, ":", sprintf("%.1f", total_hours)),
    marker = list(color = ~activity_colors[activity]),
    hoverinfo = "none"  # Remove tooltip
  ) %>%
  layout(
    font = list(family = "Fira Sans", size = 12, color = "black"),
    title = "What was Vadym doing in 2020?",
    xaxis = list(title = "Total Hours"),
    yaxis = list(title = "Activity", showticklabels = FALSE),
    barmode = "stack"
  )  %>%
  # Add customizations for interactivity and appearance
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage", "select2d", "lasso2d"),
    staticPlot = FALSE,
    height = 800
  )

```

## Closing remarks

We dream in ideas, concepts. To make them real requires putting them in words, and then actions. Actions can be measured. For example, if you dream about running a marathon you have to hit the track and run, and run a lot. Your colleague tells you about this marathon in 5 months and you decide to finally make your dream come true and sign up. So far, you've been running sub-5k runs every once in a while and a marathon seems daunting. How do you plan your next runs so that when the day comes you finish the run?

You can think [in terms of mileage]{.underline}

> X km/week and increase this number each week until you reach the marathon week

or [in terms of your best runs]{.underline}, which is a variation of the above.

Or, you can think [in terms of hours]{.underline}! Essentially it is the same, but from different perspective. Tracking hours really puts your goals in direct comparison with other parts of your life and you can easily spot things that prevent you from achieving your goals—if this is the case. Time tracking takes focus from something far and sometimes unreachable to something you have full control over—your time!

::: {.callout-tip title="Session info" collapse="true" icon="false"}
```{r}
sessionInfo()
```
:::
