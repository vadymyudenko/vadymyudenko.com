---
title: "Thinking about one's life"
description: |
  Categorizing, Tracking and Visualizing one's daily life. 
  Timetracking part 1 of N 
author: 
 - name: Vadym Yudenko
   affiliation: American University Kyiv
   affiliation-url: https://auk.edu.ua/en/
date: 2023-07-14
toc-depth: 4
draft: true 
categories:
  - timetracking
  - self-surveillance
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
```

```{css, echo=FALSE}
.dygraphs.html-widget.html-fill-item.overflow-hidden {
    overflow: hidden !important;       /* This will hide both horizontal and vertical scrollbars */
    overflow-y: hidden !important;    /* This specifically hides the vertical scrollbar */
}
```

```{r load libraries}
# devtools::install_github("liamgilbey/ggwaffle")
# library(ggwaffle)
library(stargazer)
library(tidyverse)
library(ggExtra)
library(ggtext)
library(ggthemes)
library(gganimate)
library(extrafont)
library(grid)
library(transformr)
library(corrr)
library(corrplot)
library(lubridate)
library(reshape2)
library(plotly)
library(scales)
library(ggiraph)
library(glue)
library(knitr)
library(fontawesome)
library(RColorBrewer)
library(DT)
```

```{r load data}
data_long <- read.csv("data.csv") %>%
  mutate(
    datetime = as.POSIXct(datetime, format="%m/%d/%Y %H:%M", tz="GMT+3"),
    day_of_week = weekdays(datetime),
    time_of_day = case_when(
      hour(datetime) < 12 ~ "Morning",
      hour(datetime) < 18 ~ "Day",
      TRUE ~ "Night"
    ),
    time_column = if_else(substr(as.character(datetime), 12, 16) == "", "00:00", substr(as.character(datetime), 12, 16)),
    category5 = case_when(
      activity %in% c("Sleep", "Sport", "Communication", "Japanese") ~ activity,
      activity %in% c("Study", "Work", "TM", "Planning", "Reading") ~ "Study/Work",
      activity %in% c("Transportation", "Misc", "Waste", "Food") ~ "Rest"
    ),
    hour = hour(datetime),
    day = wday(datetime, label = TRUE, abbr = TRUE, week_start = 1),
    month = month(datetime, label = TRUE, abbr = FALSE),
    date_char = as.character(datetime)
  )

loadfonts(device = 'win')

activity_colors <- c(
  "Sleep" = "#1E90FF",  # DodgerBlue
  "Sport" = "#32CD32",  # LimeGreen
  "Study" = "#DAA520",  # Goldenrod
  "Communication" = "#87CEEB",  # SkyBlue
  "Food" = "#FFD700",  # Gold
  "Waste" = "black",
  "Reading" = "#FFA07A",  # LightSalmon
  "Japanese" = "#FF69B4",  # HotPink
  "Misc" = "#8FBC8F",  # DarkSeaGreen
  "TM" = "#9370DB",  # MediumPurple
  "Transportation" = "#A9A9A9"  # DarkGray
)

time_ticks06 <- c(
    "06:00", "06:20", "06:40", "07:00", "07:20", "07:40", "08:00", "08:20", "08:40", "09:00",
    "09:20", "09:40", "10:00", "10:20", "10:40", "11:00", "11:20", "11:40", "12:00", "12:20",
    "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40", "15:00", "15:20", "15:40",
    "16:00", "16:20", "16:40", "17:00", "17:20", "17:40", "18:00", "18:20", "18:40", "19:00",
    "19:20", "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40", "22:00", "22:20",
    "22:40", "23:00", "23:20", "23:40", "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
    "02:00", "02:20", "02:40", "03:00", "03:20", "03:40", "04:00", "04:20", "04:40", "05:00",
    "05:20", "05:40"
)


time_ticks15 <- c("15:00", "15:20", "15:40", "16:00", "16:20", "16:40", "17:00",
                "17:20", "17:40", "18:00", "18:20", "18:40", "19:00", "19:20",
                "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40",
                "22:00", "22:20", "22:40", "23:00", "23:20", "23:40",
                "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
                "02:00", "02:20", "02:40", "03:00", "03:20", "03:40",
                "04:00", "04:20", "04:40", "05:00", "05:20", "05:40",
                "06:00", "06:20", "06:40", "07:00", "07:20", "07:40",
                "08:00", "08:20", "08:40", "09:00", "09:20", "09:40",
                "10:00", "10:20", "10:40", "11:00", "11:20", "11:40",
                "12:00", "12:20", "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40")
```

```{r set theme}
blog_theme <-
   theme_minimal(18, base_family = "IBM Plex Mono") +
   theme(
     plot.background = element_rect(fill = "white", color = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24, margin = margin(b = 1, unit = "line")),
     legend.position = c(0, 1),
     legend.direction = "horizontal",
     legend.justification = c(0, 1),
     legend.title.align = 1,
     axis.title.y = element_text(hjust = 0),
     axis.title.x = element_text(hjust = 0),
     panel.grid.major = element_line(color = "#d3d9db"),
     panel.grid.minor = element_blank()
   )
 
theme_set(blog_theme)
```

## 2020 {#main_plot}

::: column-screen
```{r main plot}
p <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        "Activity: ", activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    plot.title = element_text(face = "bold", size = 14),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 6)
    )

ggplotly(p, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
    font = list(family = "IBM Plex Sans Condensed"),
    hoverlabel = list(font = list(family = "IBM Plex Sans Condensed"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 800  # Adjust the height of the plot
  )

```
:::

```{r}
#| column: margin

# Create a data frame from the activity_colors vector
df <- data.frame(Category = names(activity_colors), Color = unname(activity_colors))

# Function to colorize cells
colorize_cells <- function(data, column_name) {
  css_colors <- sprintf("background-color: %s;", data[[column_name]])
  css_column <- sprintf("<span style='%s'>%s</span>", css_colors, data[[column_name]])
  return(css_column)
}

df$Color <- colorize_cells(df, "Color")

# Display the table without row names and with minimal spacing between rows
datatable(df, escape = FALSE, rownames = FALSE, options = list(autoWidth = FALSE, searching = FALSE, paging = FALSE, info = FALSE)) %>%
  formatStyle(names(df), padding = "2px 4px")
```

Above you see a result of my year-long endeavor to track my daily life. Each day was divided into 72 20-minutes intervals, filled with activities. Feel free to play with it [*(you can zoom in, to undo look for a button in the top right corner)*]{.underline}.

Now that you've overcome an initial amazement, it is about time you ask yourself a question:

::: {style="text-align:center; font-size:30px; font-weight:bold;"}
Why?
:::

There is a short and \[not-so-short\] answer.

**Short answer is:**

Sometime in Summer 2019[^1] I was bored and wasted days doing a whole lot of nothing. Before I never knew one can get tired from doing nothing, but that summer I languished a lot.

[^1]: Original file is lost, but I continued in December 2019, which is what is presented here.

On one such morning, having woken up at 12am hopelessly fatigue I had enough. I hated myself, for I was doing a whole lot of nothing, and at around that time I realized I needed meaning in my life - feeling of accomplishment and being proud of myself; was reading motivational books like 7 Habits and thinking about what do I do with my life. This is the WHY, now about the HOW.

In addition to reading motivational books I watched similar videos. One of them was by [Coffee Break](https://youtu.be/Owgxw8d4L84?si=I_LeilyayUu2o1LH), in which he mention that time management is crucial skill to have. To then undeveloped, young boy this seemed like a revelation! Stars aligned and I started tracking my time, having adapted his approach.

Regardless of the initial goals and expectations, I had managed to carry on tracking my daily life for a year.

### Rationale

Life can be viewed as a transition between state: alive and ded :) With ded it is straight forward, but the alive state is complicated - it can be broken down further into "doing smth" and resting. Resting is mostly sleep, but you can include naps, chilling in here. "Doing smth" is everything else we do on daily basis.

This "doing smth" could be vary greatly among individuals, however there are some that are ubiquitous. Namely, eating food, drinking water, walking somewhere, household chores, buying stuff, doing something for money (work), communicating with people...

### Categories

Next, once you make a list of all the activities you do daily. You can group them into categories:

-   Food (eating and drinking)

-   Going somewhere (walking to and from school/work/church/shop)

-   Communication (spending time with family/friends/acquaintances, meeting people...)

-   Work or Study

-   Sports (morning exercises, climbing a flight of stairs (for some), walking, running, gym...)

-   ....

Having these categories you can make sense of your life. Categories allow you to simplify the all of life's complexity into a dozen categories (or less).

This article won't go into much detail on how and why certain categories were chosen. You can read about it HERE.

The rest of the article is gallery of visualizations with supporting commentary. Enjoy!

[Sleep](#sleep) \| [Food](#food) \| [Study & Japanese](#study) \| [Waste](#waste) \| [Transportation](#transport) \| [Friends and Family](#friends) \| [Planning](#plan) \| [Sport](#sport) \| [Misc](#misc)

#### Sleep {#sleep}

```{r}
data_long %>% 
  filter(activity %in% "Sleep") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(92,72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  labs(x = NULL, y = NULL) +
  # scale_y_discrete(limit = time_ticks15) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    axis.text.y = element_text(size = 5),
    legend.position = "none"
  )
```

It hits you differently when you see for yourself that over a long period of time sleep will you are sleeping for the same amount of time - sometimes more, sometimes less, but always around 7 to 8 hours a day.

```{r}
df_activity_hours <- data_long %>%
   mutate(date = as.Date(datetime)) %>%
   group_by(date, activity) %>%
   summarise(hours = n() * (20/60)) %>%
   ungroup() 

# Filter the data for "Sleep" activity and remove the first and last rows
df_filtered_sleep <- df_activity_hours %>% 
  filter(activity %in% "Sleep") %>%
  arrange(date) %>%
  slice(2:(n()-1))

# Load necessary libraries
library(dplyr)
library(dygraphs)
library(xts)

# Convert the data frame to an xts object and rename the series
xts_data_sleep <- xts(df_filtered_sleep$hours, order.by = df_filtered_sleep$date)
colnames(xts_data_sleep) <- "Sleep"

# Plot the data using dygraphs
dygraph(xts_data_sleep) %>%
  dyOptions(stackedGraph = FALSE, fillGraph = FALSE) %>%
  dyAxis("y", label = "Hours") %>%
  dyAxis("x", label = "Date", axisLabelWidth = 60) %>%  # Adjust the axisLabelWidth here
  dySeries(name = "Sleep", strokeWidth = 2) %>%
  dyHighlight(highlightCircleSize = 2, highlightSeriesOpts = list(strokeWidth = 2)) %>% 
  dyRangeSelector()
```

#### Food {#food}

```{r}
data_long %>% 
  filter(activity %in% "Food") %>% 
  ggplot(aes(x=datetime, y=as.POSIXct(time_column, format="%H:%M"))) +  # Convert time_column to POSIXct
  geom_bin2d(bins = c(92, 72)) +
  scale_fill_gradient(low = "orange", high = "yellow") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",
                   date_labels = "%b") +
  scale_y_time(labels = scales::time_format("%H:%M"), 
               expand = c(0, 0),
               breaks = seq(from = as.POSIXct("00:00", format="%H:%M"), 
                            to = as.POSIXct("23:40", format="%H:%M"), 
                            by = "20 min")) +  # Add scale_y_time here
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )
```

There is a clear of having a breakfast at around 6am (+/- and hour), but lunch and dinner timings are jumbled up - hard to discern (visually) any pattern there.

```{r}
df_filtered_food <- df_activity_hours %>% 
  filter(activity %in% "Food") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_food, aes(x = date)) +
  geom_line(aes(y = hours, color = "Food"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_food$date), max(df_filtered_food$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time have been spent eating?",
       x = NULL,
       y = "Hours",
       color = "Activity") +  # Labels
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7)) +
  scale_color_manual(values = c("Food" = "gray", "Rolling Mean" = "#FFD700"))  # Custom colors
```

If you think about it the number of hours of sleep and food are great examples of a stationary time series. (reminder to make a post about predicting sleeping patterns)

#### Friends and Family {#friends}

```{r}
df_filtered_comm <- df_activity_hours %>% 
  filter(activity %in% "Communication") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_comm, aes(x = date)) +
  geom_line(aes(y = hours, color = "Communication"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_comm$date), max(df_filtered_comm$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent communicating/socializing?",
       x = NULL,
       y = "Hours",
       color = "Activity") +  # Labels
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Communication" = "gray", "Rolling Mean" = "#87CEEB"))  # Custom colors
```

#### Transportation {#transport}

```{r}
df_filtered_trans <- df_activity_hours %>% 
  filter(activity %in% "Transportation") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

# Combine the two filtered data frames
df_combined_1 <- rbind(
  df_filtered_comm %>% mutate(activity_type = "Communication"),
  df_filtered_trans %>% mutate(activity_type = "Transportation"))

# Determine the position for the labels (most recent date with non-NA rolling mean)
latest_date_comm <- max(df_filtered_comm$date[!is.na(df_filtered_comm$rolling_mean)], na.rm = TRUE)
latest_date_trans <- max(df_filtered_trans$date[!is.na(df_filtered_trans$rolling_mean)], na.rm = TRUE)

# Values for the rolling means at the latest dates
comm_rollmean_value <- df_filtered_comm$rolling_mean[df_filtered_comm$date == latest_date_comm]
trans_rollmean_value <- df_filtered_trans$rolling_mean[df_filtered_trans$date == latest_date_trans]

# Plot the combined data
ggplot(df_combined_1, aes(x = date)) +
  geom_line(aes(y = hours, color = activity_type), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = paste(activity_type, "Rolling Mean")), size = 1) +  # Individual rolling means
  
  scale_x_date(limits = c(min(df_combined_1$date), max(df_combined_1$date)), 
               expand = c(0, 0),
               date_breaks = "1 month",  # Display every month on the x-axis
               date_labels = "%B") +  # Format the date labels as "Month Year"
  
  labs(title = "When do you find time for Communication and Transportation?",
       x = NULL,
       y = "Hours",
       color = "Activity") +  # Labels
  
  theme_minimal() +
  theme(legend.position = "top",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7),
        panel.grid.major = element_blank(),  # Remove major grid
        panel.grid.minor = element_blank()) +  # Remove minor grid
  
  scale_color_manual(values = c("Communication Rolling Mean" = "blue", 
                                "Transportation Rolling Mean" = "green")) +  # Custom colors
  
  # Add prettified labels for the rolling means
  annotate("text", x = latest_date_comm - 80, y = comm_rollmean_value + 5.5, 
           label = "Notice, how Communication follows 
           Transportation in some cases.", 
           hjust = 0.5, color = "black", size = 4, fontface = "bold")
```

Transportation is supposed to capture my movements to and from point A to point B, be it from university to home, from trainings home or taking a train to visit my parents in a different city.

[Back to Main Plot](#main_plot)

#### Sport {#sport}

```{r}
df_filtered_sport <- df_activity_hours %>% 
  filter(activity %in% "Sport") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_sport, aes(x = date)) +
  geom_line(aes(y = hours, color = "Sport"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_sport$date), max(df_filtered_sport$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent doing Sports?",
       x = NULL,
       y = "Hours",
       color = "Activity") +  # Labels
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Sport" = "gray", "Rolling Mean" = "blue"))  # Custom colors
```

I have been running on and off in addition to weekly training with my team. The biggest spikes are competitions - very simple.

#### Planning {#plan}

The idea behind this categories is to allocate at least 20 minutes/day to relfect the day, and plan the next day. This took less time, when I actually got to it. In reality I ended up spending multiple hour long sessions once in blue moon.

#### Study \| Japanese {#study}

```{r}
df_filtered_study <- df_activity_hours %>% 
  filter(activity %in% "Study") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_study, aes(x = date)) +
  geom_line(aes(y = hours, color = "Study"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_food$date), max(df_filtered_food$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent Studying?",
       x = NULL,
       y = "Hours",
       color = "Activity") +  # Labels
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Study" = "gray", "Rolling Mean" = "brown"))  # Custom colors
```

```{r}
data_long %>%
  filter(activity %in% "Japanese") %>%
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(92, 72)) +
  scale_fill_gradient(low = "pink", high = "red") +  # Change coloring to red gradient
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )

```

In early Spring 2020 I found out I passed [JLPT N4](https://www.jlpt.jp/e/about/levelsummary.html) and was planning to pass N3 next year. Based on the discussion online, I figured I'd have to spend 1000 hours with the language till December 2020, when the test was to be taken, to successfully pass. I didn't specify how I'd spend this time - speaking, writing, learning [Kanji](https://en.wikipedia.org/wiki/Kanji) - but that I'd have to spend it. This allowed me to calculate how much time on average I'd have to spend with the language a day to achieve those 1000 hours. To read about calculations see my detailed guide (link will be inserted later).

```{r}
df_filtered_jap <- df_activity_hours %>% 
  filter(activity %in% "Japanese") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_jap, aes(x = date)) +
  geom_line(aes(y = hours, color = "Japanese"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_food$date), max(df_filtered_food$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent learning Japanese?",
       x = NULL,
       y = "Hours",
       color = "Activity") +  # Labels
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Japanese" = "gray", "Rolling Mean" = "red"))  # Custom colors
```

We have 8760 hours a year, subtract time for sleeping, eating, study/work and you might not find you have 1000 hours! To have more hours for `X`, you have to take those hours from `Y`.

```{r}
# Combine the two filtered data frames
df_combined <- rbind(
  df_filtered_jap %>% mutate(activity_type = "Japanese"),
  df_filtered_study %>% mutate(activity_type = "Study"))

# Determine the position for the labels (most recent date with non-NA rolling mean)
latest_date_jap <- max(df_filtered_jap$date[!is.na(df_filtered_jap$rolling_mean)], na.rm = TRUE)
latest_date_study <- max(df_filtered_study$date[!is.na(df_filtered_study$rolling_mean)], na.rm = TRUE)

# Values for the rolling means at the latest dates
jap_rollmean_value <- df_filtered_jap$rolling_mean[df_filtered_jap$date == latest_date_jap]
study_rollmean_value <- df_filtered_study$rolling_mean[df_filtered_study$date == latest_date_study]


# Plot the combined data
ggplot(df_combined, aes(x = date)) +
  geom_line(aes(y = hours, color = activity_type), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = paste(activity_type, "Rolling Mean")), size = 1) +  # Individual rolling means
  
  scale_x_date(limits = c(min(df_combined$date), max(df_combined$date)), 
               expand = c(0, 0),
               date_breaks = "1 month",  # Display every month on the x-axis
               date_labels = "%B") +  # Format the date labels as "Month Year"
  
  labs(title = "When do you find time to learn Japanese?",
       x = NULL,
       y = "Hours",
       color = "Activity") +  # Labels
  
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7),
        panel.grid.major = element_blank(),  # Remove major grid
        panel.grid.minor = element_blank()) +  # Remove minor grid
  
  scale_color_manual(values = c("Japanese" = "gray", 
                                "Study" = "gray", 
                                "Japanese Rolling Mean" = "red", 
                                "Study Rolling Mean" = "brown")) +  # Custom colors
  
  # Add prettified labels for the rolling means
  annotate("text", x = latest_date_jap, y = jap_rollmean_value + 2.5, label = "Japanese", 
           hjust = 1.2, color = "red", size = 4, fontface = "bold") +
  annotate("text", x = latest_date_study - 50, y = study_rollmean_value - 1, label = "Study", 
           hjust = 1.2, color = "brown", size = 4, fontface = "bold")

```

In my case it was from my main studies in the university. Covid started, everything went online, and that's when my studies ended as I started focusing on Japanese.

```{r}
library(ggnewscale)

ggplot(data_long, aes(x=datetime, y=time_column)) +
  # First geom_bin2d for "Study"
  geom_bin2d(data = subset(data_long, activity == "Study"), 
             bins = c(72, 367), aes(fill = ..density..)) +
  scale_fill_continuous(type = "viridis", name = "Study Density") +
  
  # Introduce a new fill scale
  new_scale_fill() +
  
  # Second geom_bin2d for "Japanese"
  geom_bin2d(data = subset(data_long, activity == "Japanese"), 
             bins = c(72, 367), aes(fill = ..density..)) +
  scale_fill_gradient(name = "Japanese Density", low = "pink", high = "red") +
  
  # Common layers
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b %Y") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 6, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "right"
  )

```

#### Waste {#waste}

```{r}
data_long %>% 
  filter(activity %in% "Waste") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(72, 367)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b %Y") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 6, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none")
```

Just to be clear, by Waste of Time is when I hate myself for the time I've spent. Like when you watch videos instead of getting some rest. The "I wish I had spent this time better" feeling is interlinked with this category. This category was mostly invoked for me spending a little too much time on the internet.

#### Miscellaneous {#misc}

We come to what I think is the most mysterious category of all - the one that encapsulates everything else - Miscellaneous. (I think it will deserve a separate post later).

Miscellaneous is stuff that is not necessarily productive, but something one has to do or just does, as it is a part of one's life. Brushing teeth, medical check up, vacuum cleaning, shopping, watching videos.[^2]

[^2]: After working, studying, eating, I sometimes watch videos for myself. This I can't consider relaxing, nor can I say that I'm wasting my time, it is just what I do - it is a part of my life. So, it goes into Miscellaneous. But if I overdo it, then it goes to Waste of Time. Read this chapter (which will be published later)

Look at the heatmaps below...

```{r}
data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(23, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )
```

```{r}
data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(46, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )
```

```{r}
data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(92, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )
```

```{r}
data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(184, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )
```

```{r}
data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(367, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )
```

As these events are omnipresent. When the picture is fine grain, they don't appear to take that much time, but they do take a lot of the time.

When you are asked about how was your day, this is the last category you think about! You might think about your work, relationship, productivity, not brushing your teeth or cleaning the floor in your kitchen. On their own these events are inconsequential, but put together they should not be forgotten about.

## Summary

As a short summary

```{r}
# List of activities
activities <- c("Misc", "Study", "Japanese")

# Filter the data for the specified activities and calculate the rolling mean
df_filtered_multi <- df_activity_hours %>%
  filter(activity %in% activities) %>%
  arrange(date) %>%
  group_by(activity) %>%
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right")) %>%
  ungroup()

# Plot the combined data
ggplot(df_filtered_multi, aes(x = date)) +
  geom_line(aes(y = hours, color = activity), size = 0.5, alpha = 0.7) +  # Original data
  geom_line(aes(y = rolling_mean, color = activity, linetype = "Rolling Mean"), size = 1) +  # Rolling means
  
  scale_x_date(limits = c(min(df_filtered_multi$date), max(df_filtered_multi$date)), 
               expand = c(0, 0),
               date_breaks = "1 month",  # Display every month on the x-axis
               date_labels = "%B") +  # Format the date labels as "Month Year"
  
  labs(title = "Relationship between the time spent between Study/Japanese/Miscellaneous",
       x = NULL,
       y = "Hours",
       color = "Activity",
       linetype = "Type") +  # Labels
  
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7),
        panel.grid.major = element_blank(),  # Remove major grid
        panel.grid.minor = element_blank()) +  # Remove minor grid
  
  scale_color_brewer(palette = "Set1") +  # Use a color palette that can differentiate between multiple categories
  scale_linetype_manual(values = c("Rolling Mean" = "solid", "Activity" = "dashed")) +  # Differentiate between original data and rolling mean  
  # Add prettified labels for the rolling means
  annotate("text", x = latest_date_jap - 100, y = jap_rollmean_value + 5, label = "Japanese", 
           hjust = 1.2, color = "red", size = 4, fontface = "bold", family = "IBM Plex Mono") +
  annotate("text", x = latest_date_study - 50, y = study_rollmean_value - 1, label = "Study", 
           hjust = 1.2, color = "darkgreen", size = 4, fontface = "bold", family = "IBM Plex Mono") +
    # Add prettified labels for the rolling means
  annotate("text", x = latest_date_jap - 10, y = jap_rollmean_value + 5, label = "Miscellaneous", 
           hjust = 1.2, color = "blue", size = 4, fontface = "bold", family = "IBM Plex Mono")

```

```{r}
activity_hours_total <- data_long %>%
  group_by(activity) %>%
  summarise(count_observations = n(), .groups = "drop") %>%
  mutate(total_hours = round(count_observations * (1/3),1))

activity_hours_total %>%
  plot_ly(labels = ~activity, 
          values = ~total_hours, 
          type = 'pie', 
          hoverinfo = "label+percent",
          textinfo = "label+value",
          text = ~paste(activity, ": ", sprintf("%.2f", total_hours), " hours")) %>%
  layout(title = "How much hours were spend on each activity?")
```

## Parting thoughts

Tracking one's daily life has many merits:

-   allows one to reflex in the moment if one has been doing what one wanted;

-   gives you visual confirmation of how you spend your time;

-   plan activities that can be achieved with some certainty when the n hours has been spend on that activity[^3]

[^3]: A great example, which I used is \[learning a language\](https://www.state.gov/foreign-language-training/) or mastering a \[programing language\](https://app.datacamp.com/learn/career-tracks/data-scientist-professional-with-r)

but it doesn't provide answer as to whether you are living your best life.

It can provide hints like having a routine, sleeping 7-8 hours a day, eating 3 meals a day, spending time communicating, socializing. But it can never tell you if that specific moment is significant or not.

On its own a single cell in the middle of your day tells nothing, but if you look at the pattern or lack thereof, you can see which areas of your life you might want to look into.

::: {.callout-tip title="Check this out" collapse="true" icon="false" style="text-align: center;"}
[Life timeline in a spreadsheet](https://flowingdata.com/2023/06/15/life-timeline-in-a-spreadsheet/) <br> [Ze Frank on Counting Jellybeans](https://youtu.be/BOksW_NabEk)
:::

```{r graveyard, echo=FALSE}
# # Modify df_activity_hours to summarize data on a weekly basis, filter for "Study" activity, and calculate hours_change
# df_activity_hours_weekly <- df_activity_hours %>%
#   mutate(week = floor_date(date, "week")) %>%
#   group_by(week, activity) %>%
#   summarise(hours = sum(hours)) %>%
#   ungroup() %>%
#   filter(activity %in% c("Japanese")) %>%
#   mutate(hours_change = hours - 20) %>%
#   slice(2:(n()-1))
# 
# # Plotting
# ggplot(df_activity_hours_weekly, aes(x = week, y = hours_change)) +
#   geom_col(
#     aes(fill = if_else(hours_change < 0, "#D50A0A", "#013369")),
#     width = 5  # Adjust width as needed
#   ) +
#   geom_hline(yintercept = 0, size = 0.75, color = "#737373") +  # Baseline at 0 (representing no change from 21 hours)
#   geom_vline(xintercept = as.Date("2020-03-20"), size = 0.75, color = "#737373") +
#   scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
#   scale_fill_identity(aesthetics = c("fill", "color")) +
#   scale_x_date(limits = c(min(df_filtered_food$date), max(df_filtered_food$date)), 
#                    expand = c(0, 0),
#                    date_breaks = "1 month",  # Display every month on the x-axis
#                    date_labels = "%B") +  # Format the date labels as "Month Year"
#   theme_minimal() +
#   theme(
#     panel.grid.major.x = element_blank()
#   )
# 
```
