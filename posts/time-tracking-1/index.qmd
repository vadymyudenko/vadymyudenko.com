---
title: "Every living hour"
description: |
  Categorizing, Tracking and Visualizing one's daily life. 
  Timetracking part 1 of 5 
author: 
 - name: Vadym Yudenko
   affiliation: American University Kyiv
   affiliation-url: https://auk.edu.ua/en/
date: 2023-11-01
toc-depth: 4
draft: true 
categories:
  - timetracking
  - self-surveillance
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.showtext=TRUE)
```

```{css, echo=FALSE}
.dygraphs.html-widget.html-fill-item.overflow-hidden {
    overflow: hidden !important;       /* This will hide both horizontal and vertical scrollbars */
}
```

```{r libraries}
# devtools::install_github("liamgilbey/ggwaffle")
# library(ggwaffle)
library(stargazer)
library(tidyverse)
library(ggExtra)
library(ggtext)
library(ggthemes)
library(gganimate)
library(ggnewscale)
library(showtext)
library(grid)
library(transformr)
library(corrr)
library(corrplot)
library(lubridate)
library(reshape2)
library(plotly)
library(scales)
library(ggiraph)
library(glue)
library(knitr)
library(fontawesome)
library(RColorBrewer)
library(DT)
library(patchwork)
```

```{r theme}
font_add_google("Fira Sans", "firasans")
font_add_google("IBM Plex Mono", "ibmplex")
# showtext::showtext_auto()

blog_theme <-
   theme_minimal(18, base_family = "IBM Plex Mono") +
   theme(
     plot.background = element_rect(fill = "white", color = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24, margin = margin(b = 1, unit = "line")),
     legend.position = c(0, 1),
     legend.direction = "horizontal",
     legend.justification = c(0, 1),
     legend.title.align = 1,
     axis.title.y = element_text(hjust = 0, size = 10),
     axis.title.x = element_text(hjust = 0, size = 10),
     panel.grid.major = element_line(color = "#d3d9db"),
     panel.grid.minor = element_blank()
   )
 
theme_set(blog_theme)
```

```{r data}
data_long <- read.csv("data.csv") %>%
  mutate(
    datetime = as.POSIXct(datetime, format="%m/%d/%Y %H:%M", tz="GMT+3"),
    day_of_week = weekdays(datetime),
    time_of_day = case_when(
      hour(datetime) < 12 ~ "Morning",
      hour(datetime) < 18 ~ "Day",
      TRUE ~ "Night"
    ),
    time_column = if_else(substr(as.character(datetime), 12, 16) == "", "00:00", substr(as.character(datetime), 12, 16)),
    category5 = case_when(
      activity %in% c("Sleep", "Sport", "Communication", "Japanese") ~ activity,
      activity %in% c("Study", "Work", "TM", "Planning", "Reading") ~ "Study/Work",
      activity %in% c("Transportation", "Misc", "Waste", "Food") ~ "Rest"
    ),
    hour = hour(datetime),
    day = wday(datetime, label = TRUE, abbr = TRUE, week_start = 1),
    month = month(datetime, label = TRUE, abbr = FALSE),
    date_char = as.character(datetime)
  )

activity_colors <- c(
  "Sleep" = "#1E90FF",  # DodgerBlue
  "Sport" = "#32CD32",  # LimeGreen
  "Study" = "#DAA520",  # Goldenrod
  "Communication" = "#87CEEB",  # SkyBlue
  "Food" = "#FFD700",  # Gold
  "Waste" = "black",
  "Reading" = "#FFA07A",  # LightSalmon
  "Japanese" = "#FF69B4",  # HotPink
  "Misc" = "#8FBC8F",  # DarkSeaGreen
  "TM" = "#9370DB",  # MediumPurple
  "Transportation" = "#A9A9A9"  # DarkGray
)

time_ticks06 <- c(
    "06:00", "06:20", "06:40", "07:00", "07:20", "07:40", "08:00", "08:20", "08:40", "09:00",
    "09:20", "09:40", "10:00", "10:20", "10:40", "11:00", "11:20", "11:40", "12:00", "12:20",
    "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40", "15:00", "15:20", "15:40",
    "16:00", "16:20", "16:40", "17:00", "17:20", "17:40", "18:00", "18:20", "18:40", "19:00",
    "19:20", "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40", "22:00", "22:20",
    "22:40", "23:00", "23:20", "23:40", "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
    "02:00", "02:20", "02:40", "03:00", "03:20", "03:40", "04:00", "04:20", "04:40", "05:00",
    "05:20", "05:40"
)


time_ticks15 <- c("15:00", "15:20", "15:40", "16:00", "16:20", "16:40", "17:00",
                "17:20", "17:40", "18:00", "18:20", "18:40", "19:00", "19:20",
                "19:40", "20:00", "20:20", "20:40", "21:00", "21:20", "21:40",
                "22:00", "22:20", "22:40", "23:00", "23:20", "23:40",
                "00:00", "00:20", "00:40", "01:00", "01:20", "01:40",
                "02:00", "02:20", "02:40", "03:00", "03:20", "03:40",
                "04:00", "04:20", "04:40", "05:00", "05:20", "05:40",
                "06:00", "06:20", "06:40", "07:00", "07:20", "07:40",
                "08:00", "08:20", "08:40", "09:00", "09:20", "09:40",
                "10:00", "10:20", "10:40", "11:00", "11:20", "11:40",
                "12:00", "12:20", "12:40", "13:00", "13:20", "13:40", "14:00", "14:20", "14:40")
```

## 2020 {#main_plot}

::: column-screen
```{r main plot}
p <- data_long %>% 
  mutate(date = as.Date(datetime)) %>%
  ggplot(aes(datetime, time_column, fill = activity)) +
  geom_bin2d(bins = c(367, 72),  
      aes(text = str_replace_all(paste0(
        "<b>", time_column, "</b><br>",
        "Activity: ", activity, "<br>"), "NA", "missing")
      )
    ) +
  scale_fill_manual(values = activity_colors) +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    plot.title = element_text(face = "bold", size = 14),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(hjust = 0.5, size = 6)
    )

ggplotly(p, tooltip = "text") %>%
  layout(
    dragmode = "zoom",  # Enable rectangular zooming
    yaxis = list(  
      tickangle = 0,  
      tickvals = seq(1, 72, by = 1) # Specify all 72 values
    ),
    xaxis = list(),  # Remove fixedrange = TRUE to allow zooming in x direction
    font = list(family = "IBM Plex Mono"),
    hoverlabel = list(font = list(family = "IBM Plex Mono"), align = "left"),
    yaxis2 = list(  # Adjust yaxis2 settings
      overlaying = "y",
      side = "left"
    ),
    margin = list(l = 50, r = 50, t = 20, b = 50),
    updatemenus = list(
      list(
        type = "buttons",
        showactive = FALSE
        # buttons = list(
        #   list(
        #     step = "all",
        #     label = "Reset",
        #     method = "relayout",
        #     args = list("yaxis.range", list(NULL, NULL))
        #   )
        # )
      )
    )
  ) %>%
  plotly::config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = c("zoom2d", "pan2d", "zoomIn2d", "zoomOut2d",
                               "autoScale2d", "toggleSpikelines", "hoverClosestCartesian",
                               "hoverCompareCartesian", "toImage"),
    staticPlot = FALSE,
    height = 800  # Adjust the height of the plot
  )

```
:::

```{r}
#| column: margin

# Create a data frame from the activity_colors vector
df <- data.frame(Category = names(activity_colors), Color = unname(activity_colors))

# Function to colorize cells
colorize_cells <- function(data, column_name) {
  css_colors <- sprintf("background-color: %s;", data[[column_name]])
  css_column <- sprintf("<span style='%s'>%s</span>", css_colors, data[[column_name]])
  return(css_column)
}

df$Color <- colorize_cells(df, "Color")

# Display the table without row names and with minimal spacing between rows
datatable(df, escape = FALSE, rownames = FALSE, options = list(autoWidth = FALSE, searching = FALSE, paging = FALSE, info = FALSE)) %>%
  formatStyle(names(df), padding = "2px 4px")
```

Above you see a result of a year-long endeavor to track my daily life. Each day was divided into 72 20-minutes intervals, and, as the day had progressed, each interval was filled with an activity. Feel free to play with it [*(you can zoom in, to undo look for a button in the top right corner)*]{.underline}.

Now that you've overcome an initial amazement, it is about time you ask yourself a question:

::: {style="text-align:center; font-size:30px; font-weight:bold;"}
Why?
:::

There is a short and long answer.

**Short answer is:**

Sometime in Summer 2019[^1] I, a university freshmen, was bored and wasted days doing a whole lot of nothing. There was no need to work, so I tried just about everything to apply myself to some task. Reading, learning languages, reflecting on what I want to do next - good things to do, but not for weeks on end. At some point I felt I was wasting my life, and I knew it. It is this fatigue when you wake up, but you don't want to wake up, and just stay in bed for hours on end.

[^1]: Original file is lost, but I continued in December 2019, which is what is analyzed here.

On one such morning, having woken up at 12am hopelessly fatigued I had had enough. At that time I realized I needed meaning in my life - a sense of accomplishment and pride in myself. I was reading motivational books like "7 Habits" and thinking about what to do with my life. This is the WHY, now about the HOW.

In addition to reading motivational books I watched miscellaneous videos Youtube throws at me. Sensing the shift in my preferences, the algorithm has offered me numerous videos on life-improvement, confidence, meaning, and time management. One of them was by [Coffee Break](https://youtu.be/Owgxw8d4L84?si=I_LeilyayUu2o1LH), in which he mention that time management is crucial skill to have, and shows how he does it in Excel file. I was fascinated with an idea and decided to try it myself. I have sinse built upon his file and added things that make this process easier.

Initial goals were:

1.  Reduce wasted time (be more productive)

2.  Optimize daily regiment based on when I am most productive: work[^2] when working feels good, rest when resting is needed.

3.  Reach 1000 hours of Japanese study (from March until December)

4.  Become more conscious of how I spend my time (i.e. "Don't waste your time")

[^2]: Work = Study. Before I had a full-time job, I regarded studying as full-time job.

Regardless of the initial goals and expectations, I had managed to carry on tracking my daily life for a year.

## About

::: {.callout-tip title="Part 1. Every living hour" collapse="false" icon="false" style="text-align: center;"}
This a part 1 of 5 of time tracking series. It serves as an introduction to the project and it's rationale. Other parts will go in depth and answer specific questions.
:::

::: {.callout-tip title="Part 2. Why track your daily life?" collapse="true" icon="false" style="text-align: center;"}
[Part 2](https://vyudenko.blog/posts/time-tracking-2) explains timetracking and goes over some of the reasons why you should or shouldn't track your daily activities. Who will benefit from using it and who won't.
:::

::: {.callout-tip title="Part 3. How to track your daily life?" collapse="true" icon="false" style="text-align: center;"}
[Part 3](https://vyudenko.blog/posts/time-tracking-3) lays out the approach and its set up. From choosing the categories to the actual tracking.
:::

::: {.callout-tip title="Part 4. Answering questions with data" collapse="true" icon="false" style="text-align: center;"}
[Part 4](https://vyudenko.blog/posts/time-tracking-4) provides examples of what kind of data-driven answers you can get by tracking your time.
:::

::: {.callout-tip title="Part 5. Other" collapse="true" icon="false" style="text-align: center;"}
[Part 5](https://vyudenko.blog/posts/time-tracking-5) looks at other projects....
:::

## Rationale

The question that I wanted to answer is how to best use the limited time resources? Answering this question prompts a series of other questions:

-   how much time is there in a day/week/month/year?
-   how much time do I spend sleeping?
-   how much time do I actually "have"?
-   how can I spend the time I have?

Answering first question is easy as there are 24 hours in a day, 7 days in a week, 30/31 days in a month, and 365 days in a year. The second and third questions are quite easy as well, people on average sleep 8 hours a day, which leaves us 16 hours for living. This "living" time is so vast and complex that to properly capture it would require a lot of categories. Yet, we can come up with a few categories that would cover most of the time we spend awake: work, study, leisure, necessities.

This is the reasoning I have applied to creation of initial categories: sleep, study, food, friends and family, miscellaneous (necessities), sport, waste. I have since added more categories, but the idea remains the same.

## Categories

Categories should help distill the complexity of life into a few categories. The categories I have used are:

-   Sleep (sleeping, napping, resting, laying in bed...)

-   Work or Study

-   Food (cooking, eating)

-   Communication (spending time with family/friends/acquaintances, meeting people...)

-   Miscellaneous (shopping, cleaning, laundry, showering, waiting, procrastinating, watching TV, listening to music, playing games, browsing the internet, social media...)

-   Sport (morning exercises, walking, running, gym...)

-   Waste of time (procrastinating, mindlessly browsing the internet...)

-   Transportation (taking a taxi, bus, train, plane, car, walking to get somewhere...)

-   Reading (reading books, articles, news, blogs, etc.)

-   Japanese (studying Japanese)

-   TM (Toastmasters - practicing public speaking)

At the time I have been studying Japanese and attending TM meetings, both were taking some time, so I extracted them from a bigger Work/Study category.

### Sleep {#sleep}

It has been determined that humans need to sleep 8 hours a day. \[source?\] Some need less, some more, but there is no escaping it :)

```{r}
# Sleep
data_long %>% 
  filter(activity %in% "Sleep") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(92,72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  labs(x = NULL, y = NULL) +
  # scale_y_discrete(limit = time_ticks15) +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 0.5),
    axis.text.y = element_text(size = 5),
    legend.position = "none"
  )
```

It hits you differently when you see for yourself that over a long period of time sleep will you are sleeping for the same amount of time - sometimes more, sometimes less, but always around 7 to 8 hours a day.

::: column-page
```{r}
df_activity_hours <- data_long %>%
   mutate(date = as.Date(datetime)) %>%
   group_by(date, activity) %>%
   summarise(hours = n() * (20/60)) %>%
   ungroup() 

# Filter the data for "Sleep" activity and remove the first and last rows
df_filtered_sleep <- df_activity_hours %>% 
  filter(activity %in% "Sleep") %>%
  arrange(date) %>%
  slice(2:(n()-1))

# Load necessary libraries
library(dplyr)
library(dygraphs)
library(xts)

# Convert the data frame to an xts object and rename the series
xts_data_sleep <- xts(df_filtered_sleep$hours, order.by = df_filtered_sleep$date)
colnames(xts_data_sleep) <- "Sleep"

# Plot the data using dygraphs
dygraph(xts_data_sleep) %>%
  dyOptions(stackedGraph = FALSE, fillGraph = FALSE) %>%
  dyAxis("y", label = "Hours") %>%
  dyAxis("x", label = "Date", axisLabelWidth = 60) %>%  # Adjust the axisLabelWidth here
  dySeries(name = "Sleep", strokeWidth = 2) %>%
  dyHighlight(highlightCircleSize = 2, highlightSeriesOpts = list(strokeWidth = 2)) %>% 
  dyRangeSelector()
```
:::

### Food {#food}

Apart from Sleep, another thing without which one cannot live is Food.

With Food I not necessarily wanted to capture the time spent eating, but rather capture eating patterns. When and how often. Because, again, having a healthy and stable eating routine is important for a healthy life. \[source\]

```{r}
data_long %>% 
  filter(activity %in% "Food") %>% 
  ggplot(aes(x=datetime, y=as.POSIXct(time_column, format="%H:%M"))) +  # Convert time_column to POSIXct
  geom_bin2d(bins = c(92, 72)) +
  scale_fill_gradient(low = "orange", high = "yellow") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",
                   date_labels = "%b") +
  scale_y_time(labels = scales::time_format("%H:%M"), 
               expand = c(0, 0),
               breaks = seq(from = as.POSIXct("00:00", format="%H:%M"), 
                            to = as.POSIXct("23:40", format="%H:%M"), 
                            by = "20 min")) +  # Add scale_y_time here
  labs(y = "", x = "") +
  theme(
    axis.text.x = element_text(size = 10, angle = 0),
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none"
  )
```

....

```{r}
df_filtered_food <- df_activity_hours %>% 
  filter(activity %in% "Food") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_food, aes(x = date)) +
  geom_line(aes(y = hours, color = "Food"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_food$date), max(df_filtered_food$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time have been spent eating each day in 2020?",
       x = NULL,
       y = "",
       color = "Activity") +  # Labels
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5, size = 18),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7)) +
  scale_color_manual(values = c("Food" = "gray", "Rolling Mean" = "#FFD700"))  # Custom colors
```

If you think about it the number of hours of sleep and food are great examples of a stationary time series. (reminder to make a post about predicting sleeping patterns)

### Friends and Family {#friends}

Social creates require people to interact with each other. And that is what I wanted to capture with this category: hanging out with friends, spending time with family, making new friends, etc.

```{r friends}
df_filtered_comm <- df_activity_hours %>% 
  filter(activity %in% "Communication") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_comm, aes(x = date)) +
  geom_line(aes(y = hours, color = "Communication"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_comm$date), max(df_filtered_comm$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent communicating/socializing?",
       x = NULL,
       y = "",
       color = "Activity") +  # Labels
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5, size = 18),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Communication" = "gray", "Rolling Mean" = "#87CEEB"))  # Custom colors
```

### Transportation {#transport}

Transportation may not be the most obvious of categories, but I traveled a lot between the cities, so it wa natural that I include it as a separate category. Mind you that while I was travelling, I could be doing other things, like reading, listening to podcasts, or sleeping. So the time spent on transportation is not necessarily the time spent on the activity, but rather it is a background to any activities that come alongside it.

```{r}
df_filtered_trans <- df_activity_hours %>% 
  filter(activity %in% "Transportation") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

# Combine the two filtered data frames
df_combined_1 <- rbind(
  df_filtered_comm %>% mutate(activity_type = "Communication"),
  df_filtered_trans %>% mutate(activity_type = "Transportation"))

# Determine the position for the labels (most recent date with non-NA rolling mean)
latest_date_comm <- max(df_filtered_comm$date[!is.na(df_filtered_comm$rolling_mean)], na.rm = TRUE)
latest_date_trans <- max(df_filtered_trans$date[!is.na(df_filtered_trans$rolling_mean)], na.rm = TRUE)

# Values for the rolling means at the latest dates
comm_rollmean_value <- df_filtered_comm$rolling_mean[df_filtered_comm$date == latest_date_comm]
trans_rollmean_value <- df_filtered_trans$rolling_mean[df_filtered_trans$date == latest_date_trans]

# Plot the combined data
ggplot(df_combined_1, aes(x = date)) +
  geom_line(aes(y = hours, color = activity_type), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = paste(activity_type, "Rolling Mean")), size = 1) +  # Individual rolling means
  
  scale_x_date(limits = c(min(df_combined_1$date), max(df_combined_1$date)), 
               expand = c(0, 0),
               date_breaks = "1 month",  # Display every month on the x-axis
               date_labels = "%B") +  # Format the date labels as "Month Year"
  
  labs(title = "When do you find time for Communication and Transportation?",
       x = NULL,
       y = "",
       color = "Activity") +  # Labels

  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5, size = 18),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7),
        panel.grid.major = element_blank(),  # Remove major grid
        panel.grid.minor = element_blank()) +  # Remove minor grid
  
  scale_color_manual(values = c("Communication Rolling Mean" = "blue", 
                                "Transportation Rolling Mean" = "green")) +  # Custom colors
  
  # Add prettified labels for the rolling means
  annotate("richtext", x = latest_date_comm - 80, y = comm_rollmean_value + 5.5, 
           label = "Notice, how <span style = 'color:blue;'>Communication</span> follows <br>
           <span style = 'color:green;'>Transportation</span> in some cases.", 
           hjust = 0.5, color = "black", size = 4, fontface = "bold")
```

Transportation is supposed to capture my movements to and from point A to point B, be it from university to home, from trainings home or taking a train to visit my parents in a different city.

### Sport {#sport}

Straightforward category, but I wanted to see how much time I spend on sport. Being physically active is also important for health.

```{r}
df_filtered_sport <- df_activity_hours %>% 
  filter(activity %in% "Sport") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_sport, aes(x = date)) +
  geom_line(aes(y = hours, color = "Sport"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_sport$date), max(df_filtered_sport$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent doing Sports?",
       x = NULL,
       y = "",
       color = "Activity") +  # Labels
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5, size = 18),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Sport" = "gray", "Rolling Mean" = "blue"))  # Custom colors
```

I have been running on and off in addition to weekly training with my team. The biggest spikes are competitions - very simple.

### Planning {#plan}

The idea behind this categories is to allocate at least 20 minutes/day to reflect the day, and plan the next day. This took less time, when I actually got to it. In reality I ended up spending multiple hour long sessions once in blue moon.

### Study & Japanese {#study}

While with other categories I mostly tracked my time, Study and Japanese categories are more exciting! As we can not only track, but also plan [how much we have to realize a certain goal]{.underline} (in my case pass N3). Read on!

```{r}
df_filtered_study <- df_activity_hours %>% 
  filter(activity %in% "Study") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_study, aes(x = date)) +
  geom_line(aes(y = hours, color = "Study"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_study$date), max(df_filtered_study$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent Studying?",
       x = NULL,
       y = "",
       color = "Activity") +  # Labels
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5, size = 18),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Study" = "gray", "Rolling Mean" = "brown"))  # Custom colors
```

```{r}
data_long %>%
  filter(activity %in% "Japanese") %>%
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(92, 72)) +
  scale_fill_gradient(low = "pink", high = "red") +  # Change coloring to red gradient
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme(
    axis.text.x = element_text(size = 10, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none") +
  labs(x="",
       y="")

```

In early Spring 2020, I found out I had passed [JLPT N4](https://www.jlpt.jp/e/about/levelsummary.html) and was planning to pass N3 next year. Based on the discussions online, I figured I need to spend 1000 hours with the language untill December 2020, when the test was scheduled, to successfully pass. I didn't specify how I would spend this time - speaking, writing, learning [Kanji](https://en.wikipedia.org/wiki/Kanji) - but that I had to dedicate it. This allowed me to calculate how much time on average I needed to dedicate to the language a day to achieve those 1000 hours.

```{r}
df_filtered_jap <- df_activity_hours %>% 
  filter(activity %in% "Japanese") %>%
  arrange(date) %>%
  slice(2:(n()-1)) %>% 
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right"))

ggplot(df_filtered_jap, aes(x = date)) +
  geom_line(aes(y = hours, color = "Japanese"), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = "Rolling Mean"), size = 1) +  # Rolling mean
  scale_x_date(limits = c(min(df_filtered_food$date), max(df_filtered_food$date)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  labs(title = "How much time has been spent learning Japanese?",
       x = NULL,
       y = "",
       color = "Activity") +  # Labels
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5, size = 18),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7))  +
  scale_color_manual(values = c("Japanese" = "gray", "Rolling Mean" = "red"))  # Custom colors
```

There are 8760 hours in a year, subtract time for sleeping, eating, study/work and you might not find you have 1000 hours! In order to get this time, you'll have to take it from somewhere else. There are no shortcuts, you'll have to sacrifice something.

```{r}
# Combine the two filtered data frames
df_combined <- rbind(
  df_filtered_jap %>% mutate(activity_type = "Japanese"),
  df_filtered_study %>% mutate(activity_type = "Study"))

# Determine the position for the labels (most recent date with non-NA rolling mean)
latest_date_jap <- max(df_filtered_jap$date[!is.na(df_filtered_jap$rolling_mean)], na.rm = TRUE)
latest_date_study <- max(df_filtered_study$date[!is.na(df_filtered_study$rolling_mean)], na.rm = TRUE)

# Values for the rolling means at the latest dates
jap_rollmean_value <- df_filtered_jap$rolling_mean[df_filtered_jap$date == latest_date_jap]
study_rollmean_value <- df_filtered_study$rolling_mean[df_filtered_study$date == latest_date_study]


# Plot the combined data
ggplot(df_combined, aes(x = date)) +
  geom_line(aes(y = hours, color = activity_type), size = 0.5) +  # Original data
  geom_line(aes(y = rolling_mean, color = paste(activity_type, "Rolling Mean")), size = 1) +  # Individual rolling means
  
  scale_x_date(limits = c(min(df_combined$date), max(df_combined$date)), 
               expand = c(0, 0),
               date_breaks = "1 month",  # Display every month on the x-axis
               date_labels = "%B") +  # Format the date labels as "Month Year"
  
  labs(title = "When do you find time to learn Japanese?",
       x = NULL,
       y = "",
       color = "Activity") +  # Labels
  
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5, size = 18),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7),
        panel.grid.major = element_blank(),  # Remove major grid
        panel.grid.minor = element_blank()) +  # Remove minor grid
  
  scale_color_manual(values = c("Japanese" = "gray", 
                                "Study" = "gray", 
                                "Japanese Rolling Mean" = "red", 
                                "Study Rolling Mean" = "brown")) +  # Custom colors
  
  # Add prettified labels for the rolling means
  annotate("text", x = latest_date_jap, y = jap_rollmean_value + 2.5, label = "Japanese", hjust = 1.2, color = "red", size = 4, fontface = "bold") +
  annotate("text", x = latest_date_study - 50, y = study_rollmean_value - 1, label = "Study", 
           hjust = 1.2, color = "brown", size = 4, fontface = "bold")

```

I have sacrificed my main studies in the university. Covid started, everything went online, and that's when my undergraduate studies ended.

### Waste {#waste}

Waste of Time is when I wish I had spent this time better. Like when you binge watch videos instead of getting some rest. This category was mostly used when I spent a little too much time on the internet. Of course, watching videos as a leisure is normal, but when I go beyond "enough gotta get back to work" is when I consider it a Waste of Time.

```{r}
data_long %>% 
  filter(activity %in% "Waste") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(72, 367)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%B") +  # Format the date labels as "Month Year"
  theme(
    axis.text.x = element_text(size = 6, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 5),
    axis.title = element_blank(),
    legend.position = "none") +
  labs(x="",
       y="")
```

One of the initial goals was to reduce wasted time, which I think I did.

### Miscellaneous {#misc}

We come to what I think is the most mysterious category of all. The one that encapsulates everything else - Miscellaneous. (I think it will deserve a separate post later).

Miscellaneous is activities that don't contribute to one's daily productivity, but something one has to do or just does, as it is a part of one's life. Brushing teeth, medical check up, vacuum cleaning, shopping, watching videos....[^3]

[^3]: After working, studying, eating, I sometimes watch videos for myself. This I can't consider relaxing, nor can I say that I'm wasting my time, it is just what I do - it is a part of my life. So, it goes into Miscellaneous. But if I overdo it, then it goes to Waste of Time. [Aster Hu's blog](https://www.asterhu.com/post/2023-09-18-time-tracking-analysis/) on tracking of spare time has a great descriptions of what comprises this category.

Look at the heat maps below...

```{r}
#| column: screen-inset
#| layout-nrow: 2
data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(367, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme(
    axis.text.x = element_text(size = 8, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 3),
    axis.title = element_blank(),
    legend.position = "none"
  ) +
  labs(x="",
       y="")

data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(184, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme(
    axis.text.x = element_text(size = 8, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 3),
    axis.title = element_blank(),
    legend.position = "none"
  ) +
  labs(x="",
       y="")

data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(92, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme(
    axis.text.x = element_text(size = 8, angle = 0),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 3),
    axis.title = element_blank(),
    legend.position = "none"
  ) +
  labs(x="",
       y="")

data_long %>% 
  filter(activity %in% "Misc") %>% 
  ggplot(aes(x=datetime, y=time_column)) +
  geom_bin2d(bins = c(46, 72)) +
  scale_fill_continuous(type = "viridis") +
  scale_x_datetime(limits = c(min(data_long$datetime), max(data_long$datetime)), 
                   expand = c(0, 0),
                   date_breaks = "1 month",  # Display every month on the x-axis
                   date_labels = "%b") +  # Format the date labels as "Month Year"
  theme(
    axis.text.x = element_blank(),  # Adjusted the angle for better visibility
    axis.text.y = element_text(size = 3),
    axis.title = element_blank(),
    legend.position = "none"
  ) +
  labs(x="",
       y="")
```

From left to right, top to bottom, we decrease the granularity (# of bins) of the data. At first you might think that there are a lot of empty space and Miscellaneous doesn't take much time, but it does! In a way, when you think about carving out some time to do something, you should first think about Miscellaneous and how you can reduce it[^4].

[^4]: I'm not implying that one should do it, but if you're ready for sacrifices than this is the category to sacrifice. For example, if you focus solely on making a lot of money, you might spend less time cleaning your flat and cooking dishes, but once you earn a lot, you can order the cleaning company's services and eat in fashionable restaurants.

When you are asked about how was your day, this is the last category you think about! You might think about your work, relationship, productivity, not brushing your teeth or cleaning the floor in your kitchen. On their own these events are inconsequential, but put together they comprise a big chuck of our lives. So much so it took as much as or more time than my studies (inc. Japanese)!

<br><br>

```{r}
# List of activities
activities <- c("Misc", "Study", "Japanese")

# Filter the data for the specified activities and calculate the rolling mean
df_filtered_multi <- df_activity_hours %>%
  filter(activity %in% activities) %>%
  arrange(date) %>%
  group_by(activity) %>%
  mutate(rolling_mean = rollmean(hours, k = 7, fill = NA, align = "right")) %>%
  ungroup()

# Plot the combined data
ggplot(df_filtered_multi, aes(x = date)) +
  geom_line(aes(y = hours, color = activity), size = 0.5, alpha = 0.7) +  # Original data
  geom_line(aes(y = rolling_mean, color = activity, linetype = "Rolling Mean"), size = 1) +  # Rolling means
  
  scale_x_date(limits = c(min(df_filtered_multi$date), max(df_filtered_multi$date)), 
               expand = c(0, 0),
               date_breaks = "1 month",  # Display every month on the x-axis
               date_labels = "%B") +  # Format the date labels as "Month Year"
  
  labs(title = "Relationship between the time spent between Study/Japanese/Miscellaneous",
       x = NULL,
       y = "Hours",
       color = "Activity",
       linetype = "Type") +  # Labels
  
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(family = "IBM Plex Mono", hjust = 0.5),
        axis.text = element_text(family = "IBM Plex Mono"),
        axis.title = element_text(family = "IBM Plex Mono"),
        axis.text.x = element_text(size = 7),
        panel.grid.major = element_blank(),  # Remove major grid
        panel.grid.minor = element_blank()) +  # Remove minor grid
  
  scale_color_brewer(palette = "Set1") +  # Use a color palette that can differentiate between multiple categories
  scale_linetype_manual(values = c("Rolling Mean" = "solid", "Activity" = "dashed")) +  # Differentiate between original data and rolling mean  
  # Add prettified labels for the rolling means
  annotate("text", x = latest_date_jap - 100, y = jap_rollmean_value + 5, label = "Japanese", 
           hjust = 1.2, color = "red", size = 4, fontface = "bold", family = "IBM Plex Mono") +
  annotate("text", x = latest_date_study - 50, y = study_rollmean_value - 1, label = "Study", 
           hjust = 1.2, color = "darkgreen", size = 4, fontface = "bold", family = "IBM Plex Mono") +
    # Add prettified labels for the rolling means
  annotate("text", x = latest_date_jap - 10, y = jap_rollmean_value + 5, label = "Miscellaneous", 
           hjust = 1.2, color = "blue", size = 4, fontface = "bold", family = "IBM Plex Mono")

```

## Summary

Have I achieved what I wanted with this project?

1.  Have I reduced the Wasted time? - yes and no. While I have become more conscious of it, I also realized the absolute necessity of having this time Wasted.
2.  Have I achieved my goal of 1000 hours of Japanese? - yes, but the test was cancelled due to Covid restrictions.
3.  Have I become more conscious of my time? - yes
4.  Have I improved my daily regime based on the data evidence? - no :D

After a long year of time tracking, this is how much time I have spent.

```{r}
activity_hours_total <- data_long %>%
  group_by(activity) %>%
  summarise(count_observations = n(), .groups = "drop") %>%
  mutate(total_hours = round(count_observations * (1/3),1))

activity_hours_total %>%
  plot_ly(labels = ~activity, 
          values = ~total_hours, 
          type = 'pie', 
          hoverinfo = "label+percent",
          textinfo = "label+value",
          text = ~paste(activity, ": ", sprintf("%.2f", total_hours), " hours")) %>%
  layout(title = "How much hours were spend on each activity?")
```



[Part 2](https://vyudenko.blog/posts/time-tracking-2)

::: {.callout-tip title="Check this out" collapse="true" icon="false" style="text-align: center;"}
[Life timeline in a spreadsheet](https://flowingdata.com/2023/06/15/life-timeline-in-a-spreadsheet/) <br> [Ze Frank on Counting Jellybeans](https://youtu.be/BOksW_NabEk)
:::
