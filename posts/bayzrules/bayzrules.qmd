---
title: bayz_rules
description: |
  A short description of the post.
author: Vadym Yudneko
date: 2023-08-01
draft: true 
categories:
  - bayes
  - statistics
creative_commons: CC BY
---

## Bayesian Updating

Bayesian updating, the application of Bayes' Theorem:

$$
\begin{equation}
P(A|B) = \frac{P(B|A)P(A)}{P(B)}
\end{equation}
$$ where $P(A)$ is a prior probability, $P(B)$ is the evidence term to enforce closure, $P(B|A)$ is the posterior probability.

$$
\begin{equation}
P(\text{The Thing is Happening}|\text{Positive Test}) = \frac{P(\text{Positive Test}|\text{The Thing is Happening})P(\text{The Thing is Happening})}{P(\text{Positive Test})}
\end{equation}
$$

Bayes' theorem can be expanded to a form that is more readily calculated.

$$
\begin{equation}
P(A|B) = \frac{P(B|A)P(A)}{P(B|A)P(A)+P(B|A^c)P(A^c)}
\end{equation}
$$

```{r}
library(shiny)
library(ggplot2)

ui <- fluidPage(
  titlePanel("Bayesian Updating Demo"),
  sidebarLayout(
    sidebarPanel(
      sliderInput(inputId = "P_happening",
                  label = "P(H)",
                  min = 0,
                  max = 1,
                  value = 0.1,
                  step = 0.1),
      sliderInput(inputId = "P_positive_given_happening",
                  label = "P(+|H)",
                  min = 0,
                  max = 1,
                  value = 0.9,
                  step = 0.01),
      sliderInput(inputId = "P_positive_given_not_happening",
                  label = "P(+|H^c)",
                  min = 0,
                  max = 1,
                  value = 0.01,
                  step = 0.01)
    ),
    mainPanel(plotOutput("bayes_plot"))
  )
)

server <- function(input, output) {
  output$bayes_plot <- renderPlot({
    P_happening <- input$P_happening
    P_positive_given_happening <- input$P_positive_given_happening
    P_positive_given_not_happening <- input$P_positive_given_not_happening

    P_not_positive_given_happening <- round((1 - P_positive_given_happening), 3)
    P_not_positive_given_not_happening <- round((1 - P_positive_given_not_happening), 3)
    P_not_happening <- round((1.0 - P_happening), 3)

    P_positive <- round((P_positive_given_happening * P_happening + P_positive_given_not_happening * P_not_happening), 3)
    P_not_positive <- round((P_not_positive_given_happening * P_happening + P_not_positive_given_not_happening * P_not_happening), 3)

    P_happening_given_positive <- round(((P_positive_given_happening * P_happening) / P_positive), 3)
    P_not_happening_given_positive <- round((P_positive_given_not_happening * P_not_happening) / P_positive, 3)

    P_happening_given_not_positive <- round(((P_not_positive_given_happening * P_happening) / P_not_positive), 3)
    P_not_happening_given_not_positive <- round(((P_not_positive_given_not_happening * P_not_happening) / P_not_positive), 3)

    # Plotting here
    # For simplicity, just creating a bar plot, you can modify this to create the required plot
    data <- data.frame(
      Category = c("P_happening", "P_positive_given_happening", "P_positive_given_not_happening",
                   "P_not_positive_given_happening", "P_not_positive_given_not_happening", "P_not_happening", 
                   "P_positive", "P_not_positive", "P_happening_given_positive", "P_not_happening_given_positive",
                   "P_happening_given_not_positive", "P_not_happening_given_not_positive"),
      Value = c(P_happening, P_positive_given_happening, P_positive_given_not_happening, 
                P_not_positive_given_happening, P_not_positive_given_not_happening, P_not_happening, 
                P_positive, P_not_positive, P_happening_given_positive, P_not_happening_given_positive, 
                P_happening_given_not_positive, P_not_happening_given_not_positive)
    )
    ggplot(data, aes(x = Category, y = Value)) +
      geom_bar(stat = "identity") +
      theme(axis.text.x = element_text(angle = 90, hjust = 1))
  }, height = 600, width = 800)
}

shinyApp(ui = ui, server = server)
```
